(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.spiritWebgl=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){module.exports=function(strings){if(typeof strings==="string")strings=[strings];var exprs=[].slice.call(arguments,1);var parts=[];for(var i=0;i<strings.length-1;i++){parts.push(strings[i],exprs[i]||"")}parts.push(strings[i]);return parts.join("")}},{}],2:[function(require,module,exports){function forEach(arr,callback,thisObj){if(arr==null){return}var i=-1,len=arr.length;while(++i<len){if(callback.call(thisObj,arr[i],i,arr)===false){break}}}module.exports=forEach},{}],3:[function(require,module,exports){function slice(arr,start,end){var len=arr.length;if(start==null){start=0}else if(start<0){start=Math.max(len+start,0)}else{start=Math.min(start,len)}if(end==null){end=len}else if(end<0){end=Math.max(len+end,0)}else{end=Math.min(end,len)}var result=[];while(start<end){result.push(arr[start++])}return result}module.exports=slice},{}],4:[function(require,module,exports){var kindOf=require(10);var isPlainObject=require(9);var mixIn=require(17);function clone(val){switch(kindOf(val)){case"Object":return cloneObject(val);case"Array":return cloneArray(val);case"RegExp":return cloneRegExp(val);case"Date":return cloneDate(val);default:return val}}function cloneObject(source){if(isPlainObject(source)){return mixIn({},source)}else{return source}}function cloneRegExp(r){var flags="";flags+=r.multiline?"m":"";flags+=r.global?"g":"";flags+=r.ignoreCase?"i":"";return new RegExp(r.source,flags)}function cloneDate(date){return new Date(+date)}function cloneArray(arr){return arr.slice()}module.exports=clone},{10:10,17:17,9:9}],5:[function(require,module,exports){var clone=require(4);var forOwn=require(13);var kindOf=require(10);var isPlainObject=require(9);function deepClone(val,instanceClone){switch(kindOf(val)){case"Object":return cloneObject(val,instanceClone);case"Array":return cloneArray(val,instanceClone);default:return clone(val)}}function cloneObject(source,instanceClone){if(isPlainObject(source)){var out={};forOwn(source,function(val,key){this[key]=deepClone(val,instanceClone)},out);return out}else if(instanceClone){return instanceClone(source)}else{return source}}function cloneArray(arr,instanceClone){var out=[],i=-1,n=arr.length,val;while(++i<n){out[i]=deepClone(arr[i],instanceClone)}return out}module.exports=deepClone},{10:10,13:13,4:4,9:9}],6:[function(require,module,exports){var isKind=require(7);var isArray=Array.isArray||function(val){return isKind(val,"Array")};module.exports=isArray},{7:7}],7:[function(require,module,exports){var kindOf=require(10);function isKind(val,kind){return kindOf(val)===kind}module.exports=isKind},{10:10}],8:[function(require,module,exports){var isKind=require(7);function isObject(val){return isKind(val,"Object")}module.exports=isObject},{7:7}],9:[function(require,module,exports){function isPlainObject(value){return!!value&&typeof value==="object"&&value.constructor===Object}module.exports=isPlainObject},{}],10:[function(require,module,exports){function kindOf(val){return Object.prototype.toString.call(val).slice(8,-1)}module.exports=kindOf},{}],11:[function(require,module,exports){var forEach=require(2);var slice=require(3);var forOwn=require(13);function fillIn(obj,var_defaults){forEach(slice(arguments,1),function(base){forOwn(base,function(val,key){if(obj[key]==null){obj[key]=val}})});return obj}module.exports=fillIn},{13:13,2:2,3:3}],12:[function(require,module,exports){var hasOwn=require(14);var _hasDontEnumBug,_dontEnums;function checkDontEnum(){_dontEnums=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"];_hasDontEnumBug=true;for(var key in{toString:null}){_hasDontEnumBug=false}}function forIn(obj,fn,thisObj){var key,i=0;if(_hasDontEnumBug==null)checkDontEnum();for(key in obj){if(exec(fn,obj,key,thisObj)===false){break}}if(_hasDontEnumBug){var ctor=obj.constructor,isProto=!!ctor&&obj===ctor.prototype;while(key=_dontEnums[i++]){if((key!=="constructor"||!isProto&&hasOwn(obj,key))&&obj[key]!==Object.prototype[key]){if(exec(fn,obj,key,thisObj)===false){break}}}}}function exec(fn,obj,key,thisObj){return fn.call(thisObj,obj[key],key,obj)}module.exports=forIn},{14:14}],13:[function(require,module,exports){var hasOwn=require(14);var forIn=require(12);function forOwn(obj,fn,thisObj){forIn(obj,function(val,key){if(hasOwn(obj,key)){return fn.call(thisObj,obj[key],key,obj)}})}module.exports=forOwn},{12:12,14:14}],14:[function(require,module,exports){function hasOwn(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop)}module.exports=hasOwn},{}],15:[function(require,module,exports){var forOwn=require(13);var keys=Object.keys||function(obj){var keys=[];forOwn(obj,function(val,key){keys.push(key)});return keys};module.exports=keys},{13:13}],16:[function(require,module,exports){var hasOwn=require(14);var deepClone=require(5);var isObject=require(8);function merge(){var i=1,key,val,obj,target;target=deepClone(arguments[0]);while(obj=arguments[i++]){for(key in obj){if(!hasOwn(obj,key)){continue}val=obj[key];if(isObject(val)&&isObject(target[key])){target[key]=merge(target[key],val)}else{target[key]=deepClone(val)}}}return target}module.exports=merge},{14:14,5:5,8:8}],17:[function(require,module,exports){var forOwn=require(13);function mixIn(target,objects){var i=0,n=arguments.length,obj;while(++i<n){obj=arguments[i];if(obj!=null){forOwn(obj,copyProp,target)}}return target}function copyProp(val,key){this[key]=val}module.exports=mixIn},{13:13}],18:[function(require,module,exports){var typecast=require(22);var isArray=require(6);var hasOwn=require(14);function decode(queryStr,shouldTypecast){var queryArr=(queryStr||"").replace("?","").split("&"),reg=/([^=]+)=(.+)/,i=-1,obj={},equalIndex,cur,pValue,pName;while(cur=queryArr[++i]){equalIndex=cur.indexOf("=");pName=cur.substring(0,equalIndex);pValue=decodeURIComponent(cur.substring(equalIndex+1));if(shouldTypecast!==false){pValue=typecast(pValue)}if(hasOwn(obj,pName)){if(isArray(obj[pName])){obj[pName].push(pValue)}else{obj[pName]=[obj[pName],pValue]}}else{obj[pName]=pValue}}return obj}module.exports=decode},{14:14,22:22,6:6}],19:[function(require,module,exports){var forOwn=require(13);var isArray=require(6);var forEach=require(2);function encode(obj){var query=[],arrValues,reg;forOwn(obj,function(val,key){if(isArray(val)){arrValues=key+"=";reg=new RegExp("&"+key+"+=$");forEach(val,function(aValue){arrValues+=encodeURIComponent(aValue)+"&"+key+"="});query.push(arrValues.replace(reg,""))}else{query.push(key+"="+encodeURIComponent(val))}});return query.length?"?"+query.join("&"):""}module.exports=encode},{13:13,2:2,6:6}],20:[function(require,module,exports){function getQuery(url){var queryString=/\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(url);return queryString?decodeURIComponent(queryString[0].replace(/\+/g," ")):""}module.exports=getQuery},{}],21:[function(require,module,exports){var decode=require(18);var getQuery=require(20);function parse(url,shouldTypecast){return decode(getQuery(url),shouldTypecast)}module.exports=parse},{18:18,20:20}],22:[function(require,module,exports){var UNDEF;function typecast(val){var r;if(val===null||val==="null"){r=null}else if(val==="true"){r=true}else if(val==="false"){r=false}else if(val===UNDEF||val==="undefined"){r=UNDEF}else if(val===""||isNaN(val)){r=val}else{r=parseFloat(val)}return r}module.exports=typecast},{}],23:[function(require,module,exports){(function(process){(function(){(function(){var getNanoSeconds,hrtime,loadTime,moduleLoadTime,nodeLoadTime,upTime;if(typeof performance!=="undefined"&&performance!==null&&performance.now){module.exports=function(){return performance.now()}}else if(typeof process!=="undefined"&&process!==null&&process.hrtime){module.exports=function(){return(getNanoSeconds()-nodeLoadTime)/1e6};hrtime=process.hrtime;getNanoSeconds=function(){var hr;hr=hrtime();return hr[0]*1e9+hr[1]};moduleLoadTime=getNanoSeconds();upTime=process.uptime()*1e9;nodeLoadTime=moduleLoadTime-upTime}else if(Date.now){module.exports=function(){return Date.now()-loadTime};loadTime=Date.now()}else{module.exports=function(){return(new Date).getTime()-loadTime};loadTime=(new Date).getTime()}}).call(this)}).call(this)}).call(this,require(24))},{24:24}],24:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}(function(){try{if(typeof setTimeout==="function"){cachedSetTimeout=setTimeout}else{cachedSetTimeout=defaultSetTimout}}catch(e){cachedSetTimeout=defaultSetTimout}try{if(typeof clearTimeout==="function"){cachedClearTimeout=clearTimeout}else{cachedClearTimeout=defaultClearTimeout}}catch(e){cachedClearTimeout=defaultClearTimeout}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,0)}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0)}try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e){return cachedSetTimeout.call(this,fun,0)}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker)}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker)}try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e){return cachedClearTimeout.call(this,marker)}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue)}else{queueIndex=-1}if(queue.length){drainQueue()}}function drainQueue(){if(draining){return}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run()}}queueIndex=-1;len=queue.length}currentQueue=null;draining=false;runClearTimeout(timeout)}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i]}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue)}};function Item(fun,array){this.fun=fun;this.array=array}Item.prototype.run=function(){this.fun.apply(null,this.array)};process.title="browser";process.browser=true;process.env={};process.argv=[];process.version="";process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[]};process.binding=function(name){throw new Error("process.binding is not supported")};process.cwd=function(){return"/"};process.chdir=function(dir){throw new Error("process.chdir is not supported")};process.umask=function(){return 0}},{}],25:[function(require,module,exports){(function(global){(function(){var now=require(23),root=typeof window==="undefined"?global:window,vendors=["moz","webkit"],suffix="AnimationFrame",raf=root["request"+suffix],caf=root["cancel"+suffix]||root["cancelRequest"+suffix];for(var i=0;!raf&&i<vendors.length;i++){raf=root[vendors[i]+"Request"+suffix];caf=root[vendors[i]+"Cancel"+suffix]||root[vendors[i]+"CancelRequest"+suffix]}if(!raf||!caf){var last=0,id=0,queue=[],frameDuration=1e3/60;raf=function(callback){if(queue.length===0){var _now=now(),next=Math.max(0,frameDuration-(_now-last));last=next+_now;setTimeout(function(){var cp=queue.slice(0);queue.length=0;for(var i=0;i<cp.length;i++){if(!cp[i].cancelled){try{cp[i].callback(last)}catch(e){setTimeout(function(){throw e},0)}}}},Math.round(next))}queue.push({handle:++id,callback:callback,cancelled:false});return id};caf=function(handle){for(var i=0;i<queue.length;i++){if(queue[i].handle===handle){queue[i].cancelled=true}}}}module.exports=function(fn){return raf.call(root,fn)};module.exports.cancel=function(){caf.apply(root,arguments)};module.exports.polyfill=function(object){if(!object){object=root}object.requestAnimationFrame=raf;object.cancelAnimationFrame=caf}}).call(this)}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{23:23}],26:[function(require,module,exports){var THREE=window.THREE;var glslify=require(1);var undef;var _renderer;var _mesh;var _scene;var _camera;var rawShaderPrefix=exports.rawShaderPrefix=undef;var vertexShader=exports.vertexShader=undef;var copyMaterial=exports.copyMaterial=undef;exports.init=init;exports.copy=copy;exports.render=render;exports.createRenderTarget=createRenderTarget;exports.getColorState=getColorState;exports.setColorState=setColorState;function init(renderer){if(_renderer)return;_renderer=renderer;rawShaderPrefix=exports.rawShaderPrefix="precision "+_renderer.capabilities.precision+" float;\n";_scene=new THREE.Scene;_camera=new THREE.Camera;_camera.position.z=1;copyMaterial=exports.copyMaterial=new THREE.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:undef}},vertexShader:vertexShader=exports.vertexShader=rawShaderPrefix+glslify(["#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 v_uv;\n\nvoid main() {\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n"]),fragmentShader:rawShaderPrefix+glslify(["#define GLSLIFY 1\nuniform sampler2D u_texture;\n\nvarying vec2 v_uv;\n\nvoid main() {\n    gl_FragColor = texture2D( u_texture, v_uv );\n}\n"])});_mesh=new THREE.Mesh(new THREE.PlaneGeometry(2,2),copyMaterial);_scene.add(_mesh)}function copy(inputTexture,ouputTexture){_mesh.material=copyMaterial;copyMaterial.uniforms.u_texture.value=inputTexture;if(ouputTexture){_renderer.setRenderTarget(ouputTexture);_renderer.render(_scene,_camera);_renderer.setRenderTarget(null)}else{_renderer.render(_scene,_camera)}}function render(material,renderTarget){_mesh.material=material;if(renderTarget){_renderer.setRenderTarget(renderTarget);_renderer.render(_scene,_camera);_renderer.setRenderTarget(null)}else{_renderer.render(_scene,_camera)}}function createRenderTarget(width,height,format,type,minFilter,magFilter){var renderTarget=new THREE.WebGLRenderTarget(width||1,height||1,{format:format||THREE.RGBFormat,type:type||THREE.UnsignedByteType,minFilter:minFilter||THREE.LinearFilter,magFilter:magFilter||THREE.LinearFilter});renderTarget.texture.generateMipMaps=false;return renderTarget}function getColorState(){return{autoClearColor:_renderer.autoClearColor,clearColor:_renderer.getClearColor(new THREE.Color).getHex(),clearAlpha:_renderer.getClearAlpha()}}function setColorState(state){_renderer.setClearColor(state.clearColor,state.clearAlpha);_renderer.autoClearColor=state.autoClearColor}},{1:1}],27:[function(require,module,exports){var settings=require(37);var THREE=window.THREE;var undef;exports.mesh=undef;exports.init=init;function init(){var geometry=new THREE.PlaneGeometry(4e3,4e3,10,10);var planeMaterial=new THREE.MeshStandardMaterial({roughness:.7,color:0,emissive:0});var floor=exports.mesh=new THREE.Mesh(geometry,planeMaterial);floor.rotation.x=-1.57;floor.receiveShadow=true}},{37:37}],28:[function(require,module,exports){var settings=require(37);var THREE=window.THREE;var undef;var mesh=exports.mesh=undef;var pointLight=exports.pointLight=undef;exports.init=init;exports.update=update;var _currentIntensity=1;function init(){mesh=exports.mesh=new THREE.Object3D;mesh.position.set(0,500,0);var ambient=new THREE.AmbientLight(3355443);mesh.add(ambient);pointLight=exports.pointLight=new THREE.PointLight(16777215,_currentIntensity,700);pointLight.castShadow=true;pointLight.shadow.mapSize.width=4096;pointLight.shadow.mapSize.height=2048;pointLight.shadow.camera.near=10;pointLight.shadow.camera.far=700;pointLight.shadow.bias=-.001;mesh.add(pointLight);var directionalLight=new THREE.DirectionalLight(12225419,.5);directionalLight.position.set(1,1,1);mesh.add(directionalLight);var directionalLight2=new THREE.DirectionalLight(9157300,.3);directionalLight2.position.set(1,1,-1);mesh.add(directionalLight2)}function update(dt){var normalizedlightIntensity=Math.min(Math.max(settings.lightIntensity,0),1);if(normalizedlightIntensity<=0){pointLight.castShadow=false;_currentIntensity=1}else{pointLight.castShadow=true;var targetIntensity=normalizedlightIntensity*1;_currentIntensity+=(targetIntensity-_currentIntensity)*.1}pointLight.intensity=_currentIntensity}},{37:37}],29:[function(require,module,exports){var settings=require(37);var THREE=window.THREE;var shaderParse=require(38);var glslify=require(1);var simulator=require(36);var mixIn=require(17);var fillIn=require(11);var undef;var container=exports.container=undef;exports.init=init;exports.update=update;var _renderer;var _particleMesh;var _triangleMesh;var _meshes;var _color1;var _color2;var _tmpColor;var TEXTURE_WIDTH=settings.simulatorTextureWidth;var TEXTURE_HEIGHT=settings.simulatorTextureHeight;var AMOUNT=TEXTURE_WIDTH*TEXTURE_HEIGHT;function init(renderer){container=exports.container=new THREE.Object3D;_tmpColor=new THREE.Color;_color1=new THREE.Color(settings.color1);_color2=new THREE.Color(settings.color2);_meshes=[_triangleMesh=_createTriangleMesh(),_particleMesh=_createParticleMesh()];_triangleMesh.visible=false;_particleMesh.visible=false;_renderer=renderer}function _createParticleMesh(){var position=new Float32Array(AMOUNT*3);var i3;for(var i=0;i<AMOUNT;i++){i3=i*3;position[i3+0]=i%TEXTURE_WIDTH/TEXTURE_WIDTH;position[i3+1]=~~(i/TEXTURE_WIDTH)/TEXTURE_HEIGHT}var geometry=new THREE.BufferGeometry;geometry.setAttribute("position",new THREE.BufferAttribute(position,3));var material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,THREE.UniformsLib.fog,{texturePosition:{type:"t",value:undef},color1:{type:"c",value:undef},color2:{type:"c",value:undef}}]),vertexShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying float vLife;\n// chunk(shadowmap_pars_vertex);\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n\n    vec4 worldPosition = modelMatrix * vec4( positionInfo.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    // chunk(shadowmap_vertex);\n\n    vLife = positionInfo.w;\n    gl_PointSize = 1300.0 / length( mvPosition.xyz ) * smoothstep(0.0, 0.2, positionInfo.w);\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\n#include <common>\n#include <packing>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <fog_pars_fragment>\n\nvarying float vLife;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvoid main() {\n\n    vec3 outgoingLight = mix(color2, color1, smoothstep(0.0, 0.7, vLife));\n\t\n    outgoingLight *=  getShadowMask();\n\n\toutgoingLight = pow( outgoingLight, vec3( 1.0 / 2.2 ) );\n\n    gl_FragColor = vec4( outgoingLight, 1.0 );\n\t\n\t#include <fog_fragment>\n}"])),blending:THREE.NoBlending,side:THREE.DoubleSide,lights:true,fog:true});material.uniforms.color1.value=_color1;material.uniforms.color2.value=_color2;var mesh=new THREE.Points(geometry,material);mesh.customDistanceMaterial=new THREE.ShaderMaterial({uniforms:{lightPos:{type:"v3",value:new THREE.Vector3(0,0,0)},texturePosition:{type:"t",value:undef}},vertexShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n\n    vec4 worldPosition = modelMatrix * vec4( positionInfo.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    gl_PointSize = 50.0 / length( mvPosition.xyz );\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\n#define DISTANCE\n#include <common>\n#include <packing>\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec4 vWorldPosition;\n\nvoid main () {\n\n\tfloat dist = length( vWorldPosition.xyz - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist);\n}\n"])),depthTest:true,depthWrite:true,side:THREE.BackSide,blending:THREE.NoBlending});mesh.motionMaterial=new THREE.ShaderMaterial({uniforms:{u_prevModelViewMatrix:{type:"m4",value:new THREE.Matrix4},u_motionMultiplier:{type:"f",value:1},texturePosition:{type:"t",value:undef},texturePrevPosition:{type:"t",value:undef}},vertexShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\nuniform sampler2D texturePrevPosition;\n\nuniform mat4 u_prevModelViewMatrix;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n    vec4 prevPositionInfo = texture2D( texturePrevPosition, position.xy );\n\n    vec4 mvPosition = modelViewMatrix * vec4( positionInfo.xyz, 1.0 );\n    gl_PointSize = 1300.0 / length( mvPosition.xyz ) * smoothstep(0.0, 0.2, positionInfo.w);\n\n    vec4 pos = projectionMatrix * mvPosition;\n    vec4 prevPos = projectionMatrix * u_prevModelViewMatrix * vec4(prevPositionInfo.xyz, 1.0);\n    v_motion = (pos.xy / pos.w - prevPos.xy / prevPos.w) * 0.5 * step(positionInfo.w, prevPositionInfo.w);\n\n    gl_Position = pos;\n\n}\n"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform float u_motionMultiplier;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n        gl_FragColor = vec4( v_motion * u_motionMultiplier, gl_FragCoord.z, 1.0 );\n\n}\n"])),depthTest:true,depthWrite:true,side:THREE.DoubleSide,blending:THREE.NoBlending});mesh.motionMaterial.motionMultiplier=1;mesh.castShadow=true;mesh.receiveShadow=true;container.add(mesh);return mesh}function _createTriangleMesh(){var position=new Float32Array(AMOUNT*3*3);var positionFlip=new Float32Array(AMOUNT*3*3);var fboUV=new Float32Array(AMOUNT*2*3);var PI=Math.PI;var angle=PI*2/3;var angles=[Math.sin(angle*2+PI),Math.cos(angle*2+PI),Math.sin(angle+PI),Math.cos(angle+PI),Math.sin(angle*3+PI),Math.cos(angle*3+PI),Math.sin(angle*2),Math.cos(angle*2),Math.sin(angle),Math.cos(angle),Math.sin(angle*3),Math.cos(angle*3)];var i6,i9;for(var i=0;i<AMOUNT;i++){i6=i*6;i9=i*9;if(i%2){position[i9+0]=angles[0];position[i9+1]=angles[1];position[i9+3]=angles[2];position[i9+4]=angles[3];position[i9+6]=angles[4];position[i9+7]=angles[5];positionFlip[i9+0]=angles[6];positionFlip[i9+1]=angles[7];positionFlip[i9+3]=angles[8];positionFlip[i9+4]=angles[9];positionFlip[i9+6]=angles[10];positionFlip[i9+7]=angles[11]}else{positionFlip[i9+0]=angles[0];positionFlip[i9+1]=angles[1];positionFlip[i9+3]=angles[2];positionFlip[i9+4]=angles[3];positionFlip[i9+6]=angles[4];positionFlip[i9+7]=angles[5];position[i9+0]=angles[6];position[i9+1]=angles[7];position[i9+3]=angles[8];position[i9+4]=angles[9];position[i9+6]=angles[10];position[i9+7]=angles[11]}fboUV[i6+0]=fboUV[i6+2]=fboUV[i6+4]=i%TEXTURE_WIDTH/TEXTURE_WIDTH;fboUV[i6+1]=fboUV[i6+3]=fboUV[i6+5]=~~(i/TEXTURE_WIDTH)/TEXTURE_HEIGHT}var geometry=new THREE.BufferGeometry;geometry.setAttribute("position",new THREE.BufferAttribute(position,3));geometry.setAttribute("positionFlip",new THREE.BufferAttribute(positionFlip,3));geometry.setAttribute("fboUV",new THREE.BufferAttribute(fboUV,2));var material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,{texturePosition:{type:"t",value:undef},flipRatio:{type:"f",value:0},color1:{type:"c",value:undef},color2:{type:"c",value:undef},cameraMatrix:{type:"m4",value:undef}}]),vertexShader:shaderParse(glslify(["#define GLSLIFY 1\n#include <common>\n#include <normal_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <fog_pars_vertex>\n\nuniform sampler2D texturePosition;\n\nvarying float vLife;\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\nuniform mat4 cameraMatrix;\n\nvoid main() {\n\n\tvec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec3 pos = positionInfo.xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    vLife = positionInfo.w;\n\n    mvPosition += vec4((position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, vLife), 0.0);\n    gl_Position = projectionMatrix * mvPosition;\n    worldPosition = cameraMatrix * mvPosition;\n\t\n\tvec3 objectNormal = vec3( 0.0, 1.0, 0.0 );\n\tvec3 transformedNormal = objectNormal;\n\t\n\t#include <normal_vertex>\n\t#include <shadowmap_vertex>\n}"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\n#include <common>\n#include <packing>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <fog_pars_fragment>\n\nvarying float vLife;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvoid main() {\n\n    vec3 outgoingLight = mix(color2, color1, smoothstep(0.0, 0.7, vLife));\n\t\n    outgoingLight *=  getShadowMask();\n\n\toutgoingLight = pow( outgoingLight, vec3( 1.0 / 2.2 ) );\n\n    gl_FragColor = vec4( outgoingLight, 1.0 );\n\t\n\t#include <fog_fragment>\n}"])),blending:THREE.NoBlending,side:THREE.DoubleSide,lights:true,fog:true});material.uniforms.color1.value=_color1;material.uniforms.color2.value=_color2;material.uniforms.cameraMatrix.value=settings.camera.matrixWorld;var mesh=new THREE.Mesh(geometry,material);mesh.customDistanceMaterial=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,{referencePosition:{value:new THREE.Vector3},nearDistance:{value:1},farDistance:{value:1e3}},{texturePosition:{type:"t",value:undef},flipRatio:{type:"f",value:0}}]),vertexShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec3 pos = positionInfo.xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * (mvPosition + vec4((position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, positionInfo.w), 0.0));\n\n}\n"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\n#define DISTANCE\n#include <common>\n#include <packing>\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec4 vWorldPosition;\n\nvoid main () {\n\n\tfloat dist = length( vWorldPosition.xyz - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist);\n}\n"])),depthTest:true,depthWrite:true,side:THREE.BackSide,blending:THREE.NoBlending});mesh.customDistanceMaterial.isMeshDistanceMaterial=true;mesh.motionMaterial=new THREE.ShaderMaterial({uniforms:{u_prevModelViewMatrix:{type:"m4",value:new THREE.Matrix4},u_motionMultiplier:{type:"f",value:1},texturePosition:{type:"t",value:undef},texturePrevPosition:{type:"t",value:undef},flipRatio:{type:"f",value:0},cameraMatrix:{type:"m4",value:undef}},vertexShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\nuniform sampler2D texturePrevPosition;\n\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\nuniform mat4 u_prevModelViewMatrix;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n\tvec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec4 prevPositionInfo = texture2D( texturePrevPosition, fboUV );\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(positionInfo.xyz + (position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, positionInfo.w), 1.0);\n\t\n    vec4 pos = projectionMatrix * modelViewMatrix * vec4(positionInfo.xyz, 1.0);\n    vec4 prevPos = projectionMatrix * u_prevModelViewMatrix * vec4(prevPositionInfo.xyz, 1.0);\n    v_motion = (pos.xy / pos.w - prevPos.xy / prevPos.w) * 0.5 * step(positionInfo.w, prevPositionInfo.w);\n\n}\n"])),fragmentShader:shaderParse(glslify(["#define GLSLIFY 1\nuniform float u_motionMultiplier;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n        gl_FragColor = vec4( v_motion * u_motionMultiplier, gl_FragCoord.z, 1.0 );\n\n}\n"])),depthTest:true,depthWrite:true,side:THREE.DoubleSide,blending:THREE.NoBlending});mesh.motionMaterial.motionMultiplier=1;mesh.motionMaterial.uniforms.cameraMatrix.value=settings.camera.matrixWorld;mesh.castShadow=true;mesh.receiveShadow=true;container.add(mesh);return mesh}function update(dt){var mesh;_triangleMesh.visible=settings.useTriangleParticles;_particleMesh.visible=!settings.useTriangleParticles;_tmpColor.setStyle(settings.color1);_color1.lerp(_tmpColor,.05);_tmpColor.setStyle(settings.color2);_color2.lerp(_tmpColor,.05);for(var i=0;i<2;i++){mesh=_meshes[i];mesh.material.uniforms.texturePosition.value=simulator.positionRenderTarget.texture;mesh.customDistanceMaterial.uniforms.texturePosition.value=simulator.positionRenderTarget.texture;mesh.motionMaterial.uniforms.texturePosition.value=simulator.positionRenderTarget.texture;mesh.motionMaterial.uniforms.texturePrevPosition.value=simulator.prevPositionRenderTarget.texture;if(mesh.material.uniforms.flipRatio){mesh.material.uniforms.flipRatio.value^=1;mesh.customDistanceMaterial.uniforms.flipRatio.value^=1;mesh.motionMaterial.uniforms.flipRatio.value^=1}}}},{1:1,11:11,17:17,36:36,37:37,38:38}],30:[function(require,module,exports){var THREE=window.THREE;var effectComposer=require(32);var fboHelper=require(26);var merge=require(16);var glslify=require(1);var undef;function Effect(){}module.exports=Effect;var _p=Effect.prototype;_p.init=init;_p.resize=resize;_p.render=render;var _shaderMaterialQuadVertexShader=glslify(["#define GLSLIFY 1\nvarying vec2 v_uv;\n\nvoid main() {\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n"]);function init(cfg){merge(this,{uniforms:{u_texture:{type:"t",value:undef},u_resolution:{type:"v2",value:effectComposer.resolution},u_aspect:{type:"f",value:1}},enabled:true,vertexShader:"",fragmentShader:"",isRawMaterial:true,addRawShaderPrefix:true},cfg);if(!this.vertexShader){this.vertexShader=this.isRawMaterial?fboHelper.vertexShader:_shaderMaterialQuadVertexShader}if(this.addRawShaderPrefix&&this.isRawMaterial){this.vertexShader=fboHelper.rawShaderPrefix+this.vertexShader;this.fragmentShader=fboHelper.rawShaderPrefix+this.fragmentShader}this.material=new THREE[this.isRawMaterial?"RawShaderMaterial":"ShaderMaterial"]({uniforms:this.uniforms,vertexShader:this.vertexShader,fragmentShader:this.fragmentShader})}function resize(width,height){}function render(dt,renderTarget,toScreen){this.uniforms.u_texture.value=renderTarget.texture;this.uniforms.u_aspect.value=this.uniforms.u_resolution.value.x/this.uniforms.u_resolution.value.y;return effectComposer.render(this.material,toScreen)}},{1:1,16:16,26:26,32:32}],31:[function(require,module,exports){var Effect=require(30);var effectComposer=require(32);var fboHelper=require(26);var glslify=require(1);var THREE=window.THREE;var undef;var exports=module.exports=new Effect;var _super=Effect.prototype;exports.init=init;exports.render=render;exports.blurRadius=3;exports.amount=.3;var _blurMaterial;var BLUR_BIT_SHIFT=1;function init(){_super.init.call(this,{uniforms:{u_blurTexture:{type:"t",value:undef},u_amount:{type:"f",value:0}},fragmentShader:glslify(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_blurTexture;\n\nuniform float u_amount;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n\n    vec3 baseColor = texture2D(u_texture, v_uv).rgb;\n    vec3 blurColor = texture2D(u_blurTexture, v_uv).rgb;\n    vec3 color = mix(baseColor, 1.0 - ((1.0 - baseColor) * (1.0 - blurColor)), u_amount);\n    // vec3 color = mix(baseColor, max(baseColor, blurColor), u_amount);\n\n    gl_FragColor = vec4(color, 1.0);\n\n}\n"])});_blurMaterial=new THREE.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:undef},u_delta:{type:"v2",value:new THREE.Vector2}},vertexShader:fboHelper.vertexShader,fragmentShader:fboHelper.rawShaderPrefix+glslify(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform vec2 u_delta;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n\n    vec3 color = texture2D( u_texture, v_uv ).rgb * 0.1633;\n\n    vec2 delta = u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.1531;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.1531;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.12245;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.12245;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.0918;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.0918;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.051;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.051;\n\n    gl_FragColor = vec4(color, 1.0);\n\n}\n"])})}function render(dt,renderTarget,toScreen){var tmpRenderTarget1=effectComposer.getRenderTarget(BLUR_BIT_SHIFT);var tmpRenderTarget2=effectComposer.getRenderTarget(BLUR_BIT_SHIFT);effectComposer.releaseRenderTarget(tmpRenderTarget1,tmpRenderTarget2);var blurRadius=exports.blurRadius;_blurMaterial.uniforms.u_texture.value=renderTarget.texture;_blurMaterial.uniforms.u_delta.value.set(blurRadius/effectComposer.resolution.x,0);fboHelper.render(_blurMaterial,tmpRenderTarget1);blurRadius=exports.blurRadius;_blurMaterial.uniforms.u_texture.value=tmpRenderTarget1.texture;_blurMaterial.uniforms.u_delta.value.set(0,blurRadius/effectComposer.resolution.y);fboHelper.render(_blurMaterial,tmpRenderTarget2);this.uniforms.u_blurTexture.value=tmpRenderTarget2.texture;this.uniforms.u_amount.value=exports.amount;_super.render.call(this,dt,renderTarget,toScreen)}},{1:1,26:26,30:30,32:32}],32:[function(require,module,exports){var THREE=window.THREE;var fboHelper=require(26);var merge=require(16);var undef;exports.init=init;exports.resize=resize;exports.renderQueue=renderQueue;exports.renderScene=renderScene;exports.render=render;exports.swapRenderTarget=swapRenderTarget;exports.getRenderTarget=getRenderTarget;exports.releaseRenderTarget=releaseRenderTarget;exports.resolution=undef;var queue=exports.queue=[];var fromRenderTarget=exports.fromRenderTarget=undef;var toRenderTarget=exports.toRenderTarget=undef;var resolution=exports.resolution=undef;var _renderTargetLists={};var _renderTargetCounts={};var _renderTargetDefaultState={depthBuffer:false,texture:{generateMipmaps:false}};exports.renderer=undef;exports.scene=undef;exports.camera=undef;function init(renderer,scene,camera){fromRenderTarget=exports.fromRenderTarget=fboHelper.createRenderTarget();toRenderTarget=exports.toRenderTarget=fboHelper.createRenderTarget();resolution=exports.resolution=new THREE.Vector2;exports.renderer=renderer;exports.scene=scene;exports.camera=camera}function resize(width,height){resolution.set(width,height);fromRenderTarget.setSize(width,height);toRenderTarget.setSize(width,height);exports.camera.aspect=width/height;exports.camera.updateProjectionMatrix();exports.renderer.setSize(width,height);for(var i=0,len=queue.length;i<len;i++){queue[i].resize(width,height)}}function _filterQueue(effect){return effect.enabled}function renderQueue(dt){var renderableQueue=queue.filter(_filterQueue);if(renderableQueue.length){toRenderTarget.depthBuffer=true;toRenderTarget.stencilBuffer=true;exports.renderer.setRenderTarget(toRenderTarget);exports.renderer.render(exports.scene,exports.camera);exports.renderer.setRenderTarget(null);swapRenderTarget();var effect;for(var i=0,len=renderableQueue.length;i<len;i++){effect=renderableQueue[i];effect.render(dt,fromRenderTarget,i===len-1)}}else{exports.renderer.render(exports.scene,exports.camera)}}function renderScene(renderTarget,scene,camera){scene=scene||exports.scene;camera=camera||exports.camera;if(renderTarget){exports.renderer.setRenderTarget(renderTarget);exports.renderer.render(scene,camera);exports.renderer.setRenderTarget(null)}else{exports.renderer.render(scene,camera)}}function render(material,toScreen){fboHelper.render(material,toScreen?undef:toRenderTarget);swapRenderTarget();return fromRenderTarget}function swapRenderTarget(){var tmp=toRenderTarget;toRenderTarget=exports.toRenderTarget=fromRenderTarget;fromRenderTarget=exports.fromRenderTarget=tmp}function getRenderTarget(bitShift,isRGBA){bitShift=bitShift||0;isRGBA=+(isRGBA||0);var width=resolution.x>>bitShift;var height=resolution.y>>bitShift;var id=bitShift+"_"+isRGBA;var list=_getRenderTargetList(id);var renderTarget;if(list.length){renderTarget=list.pop();merge(renderTarget,_renderTargetDefaultState)}else{renderTarget=fboHelper.createRenderTarget(width,height,isRGBA?THREE.RGBAFormat:THREE.RGBFormat);renderTarget._listId=id;_renderTargetCounts[id]=_renderTargetCounts[id]||0}_renderTargetCounts[id]++;if(renderTarget.width!==width||renderTarget.height!==height){renderTarget.setSize(width,height)}return renderTarget}function releaseRenderTarget(renderTarget){var renderTargets=arguments;var found,j,jlen,id,list;for(var i=0,len=renderTargets.length;i<len;i++){renderTarget=renderTargets[i];id=renderTarget._listId;list=_getRenderTargetList(id);found=false;_renderTargetCounts[id]--;for(j=0,jlen=list.length;j<jlen;j++){if(list[j]===renderTarget){found=true;break}}if(!found){list.push(renderTarget)}}}function _getRenderTargetList(id){return _renderTargetLists[id]||(_renderTargetLists[id]=[])}},{16:16,26:26}],33:[function(require,module,exports){var Effect=require(30);var glslify=require(1);module.exports=new Effect;var _super=Effect.prototype;module.exports.init=init;function init(isLow){var vs=isLow?glslify(["#define GLSLIFY 1\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform vec2 u_resolution;\n\nvarying vec2 v_uv;\n\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvoid main() {\n\n   vec2 fragCoord = uv * u_resolution;\n   texcoords(fragCoord, u_resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n\n}\n"]):"";var fs=isLow?glslify(['#define GLSLIFY 1\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 u_resolution;\nuniform sampler2D u_texture;\n\nvarying vec2 v_uv;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n\n    vec2 fragCoord = v_uv * u_resolution;\n\n    gl_FragColor = fxaa(u_texture, fragCoord, u_resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n}\n']):glslify(['#define GLSLIFY 1\nuniform vec2 u_resolution;\nuniform sampler2D u_texture;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvec4 apply(sampler2D tex, vec2 fragCoord, vec2 resolution) {\n\tmediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\n\t//compute the texture coords\n\ttexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\t\n\t//compute FXAA\n\treturn fxaa(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n\nvoid main() {\n    gl_FragColor = apply(u_texture, gl_FragCoord.xy, u_resolution);\n}\n']);_super.init.call(this,{uniforms:{},vertexShader:vs,fragmentShader:fs})}},{1:1,30:30}],34:[function(require,module,exports){var Effect=require(30);var effectComposer=require(32);var fboHelper=require(26);var glslify=require(1);var THREE=window.THREE;var undef;var exports=module.exports=new Effect;var _super=Effect.prototype;exports.init=init;exports.resize=resize;exports.render=render;exports.useSampling=false;exports.skipMatrixUpdate=false;exports.fadeStrength=1;exports.motionMultiplier=1;exports.maxDistance=100;exports.targetFPS=60;exports.leaning=.5;exports.jitter=0;exports.opacity=1;exports.depthBias=.002;exports.depthTest=false;exports.useDithering=false;exports.motionRenderTargetScale=1;exports.linesRenderTargetScale=1/2;var _motionRenderTarget;var _linesRenderTarget;var _lines;var _linesCamera;var _linesScene;var _linesPositions;var _linesPositionAttribute;var _linesGeometry;var _linesMaterial;var _samplingMaterial;var _prevUseDithering;var _prevUseSampling;var _visibleCache=[];var _width;var _height;function init(sampleCount){var gl=effectComposer.renderer.getContext();_motionRenderTarget=fboHelper.createRenderTarget(1,1,THREE.RGBAFormat,THREE.FloatType);_motionRenderTarget.depthBuffer=true;_linesRenderTarget=fboHelper.createRenderTarget(1,1,THREE.RGBAFormat,THREE.FloatType);_linesCamera=new THREE.Camera;_linesCamera.position.z=1;_linesScene=new THREE.Scene;_super.init.call(this,{uniforms:{u_lineAlphaMultiplier:{type:"f",value:1},u_linesTexture:{type:"t",value:_linesRenderTarget.texture}},fragmentShader:glslify(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_linesTexture;\nuniform float u_lineAlphaMultiplier;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec3 base = texture2D( u_texture, v_uv.xy ).rgb;\n    vec4 lines = texture2D( u_linesTexture, v_uv.xy );\n\n    vec3 color = (base + lines.rgb * u_lineAlphaMultiplier) / (lines.a * u_lineAlphaMultiplier + 1.0);\n\n    gl_FragColor = vec4( color, 1.0 );\n\n}\n"])});_linesPositions=[];_linesGeometry=new THREE.BufferGeometry;_linesMaterial=new THREE.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:undef},u_motionTexture:{type:"t",value:_motionRenderTarget.texture},u_resolution:{type:"v2",value:effectComposer.resolution},u_maxDistance:{type:"f",value:1},u_jitter:{type:"f",value:.3},u_fadeStrength:{type:"f",value:1},u_motionMultiplier:{type:"f",value:1},u_depthTest:{type:"f",value:0},u_opacity:{type:"f",value:1},u_leaning:{type:"f",value:.5},u_depthBias:{type:"f",value:.01}},vertexShader:fboHelper.rawShaderPrefix+glslify(["#define GLSLIFY 1\nattribute vec3 position;\n\nuniform sampler2D u_texture;\nuniform sampler2D u_motionTexture;\n\nuniform vec2 u_resolution;\nuniform float u_maxDistance;\nuniform float u_jitter;\nuniform float u_motionMultiplier;\nuniform float u_leaning;\n\nvarying vec3 v_color;\nvarying float v_ratio;\nvarying float v_depth;\nvarying vec2 v_uv;\n\nvoid main() {\n\n    v_color = texture2D( u_texture, position.xy ).rgb;\n\n    float side = step(0.001, position.z);\n\n    v_ratio = side;\n\n    vec3 motion = texture2D( u_motionTexture, position.xy ).xyz;\n    v_depth = motion.z;\n\n    vec2 offset = motion.xy * u_resolution * u_motionMultiplier;\n    float offsetDistance = length(offset);\n    if(offsetDistance > u_maxDistance) {\n        offset = normalize(offset) * u_maxDistance;\n    }\n\n    vec2 pos = position.xy * 2.0 - 1.0 - offset / u_resolution * 2.0 * (1.0 - position.z * u_jitter) * (side - u_leaning);\n    v_uv = pos * 0.5 + 0.5;\n\n    gl_Position = vec4( pos, 0.0, 1.0 );\n\n}\n"]),fragmentShader:fboHelper.rawShaderPrefix+glslify(["#define GLSLIFY 1\nuniform sampler2D u_motionTexture;\nuniform float u_depthTest;\nuniform float u_opacity;\nuniform float u_leaning;\nuniform float u_fadeStrength;\nuniform float u_depthBias;\nuniform float u_useDepthWeight;\n\nvarying vec3 v_color;\nvarying float v_ratio;\nvarying float v_depth;\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec3 motion = texture2D( u_motionTexture, v_uv ).xyz;\n\n    float alpha = smoothstep(0.0, u_leaning, v_ratio) * (1.0 - smoothstep (u_leaning, 1.0, v_ratio));\n\n    alpha = pow(alpha, u_fadeStrength) * u_opacity;\n\n    if(alpha < 0.00392157) {\n        discard;\n    }\n\n    float threshold = v_depth * step(0.0001, motion.z);\n    alpha *= max(1.0 - u_depthTest, smoothstep(threshold - u_depthBias, threshold, motion.z));\n\n    gl_FragColor = vec4( v_color * alpha, alpha );\n\n}\n"]),blending:THREE.CustomBlending,blendEquation:THREE.AddEquation,blendSrc:THREE.OneFactor,blendDst:THREE.OneFactor,blendEquationAlpha:THREE.AddEquation,blendSrcAlpha:THREE.OneFactor,blendDstAlpha:THREE.OneFactor,depthTest:false,depthWrite:false,transparent:true});_lines=new THREE.LineSegments(_linesGeometry,_linesMaterial);_linesScene.add(_lines);_samplingMaterial=new THREE.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:undef},u_motionTexture:{type:"t",value:_motionRenderTarget.texture},u_resolution:{type:"v2",value:effectComposer.resolution},u_maxDistance:{type:"f",value:1},u_fadeStrength:{type:"f",value:1},u_motionMultiplier:{type:"f",value:1},u_leaning:{type:"f",value:.5}},defines:{SAMPLE_COUNT:sampleCount||21},vertexShader:this.material.vertexShader,fragmentShader:fboHelper.rawShaderPrefix+"#define SAMPLE_COUNT "+(sampleCount||21)+"\n"+glslify(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_motionTexture;\n\nuniform vec2 u_resolution;\nuniform float u_maxDistance;\nuniform float u_motionMultiplier;\nuniform float u_leaning;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec2 motion = texture2D( u_motionTexture, v_uv ).xy;\n\n    vec2 offset = motion * u_resolution * u_motionMultiplier;\n    float offsetDistance = length(offset);\n    if(offsetDistance > u_maxDistance) {\n        offset = normalize(offset) * u_maxDistance;\n    }\n    vec2 delta = - offset / u_resolution * 2.0 / float(SAMPLE_COUNT);\n    vec2 pos = v_uv - delta * u_leaning * float(SAMPLE_COUNT);\n    vec3 color = vec3(0.0);\n\n    for(int i = 0; i < SAMPLE_COUNT; i++) {\n        color += texture2D( u_texture, pos ).rgb;\n        pos += delta;\n    }\n\n    gl_FragColor = vec4( color / float(SAMPLE_COUNT), 1.0 );\n\n}\n"])})}function resize(width,height){if(!width){width=_width;height=_height}else{_width=width;_height=height}var motionWidth=~~(width*exports.motionRenderTargetScale);var motionHeight=~~(height*exports.motionRenderTargetScale);_motionRenderTarget.setSize(motionWidth,motionHeight);if(!exports.useSampling){var linesWidth=~~(width*exports.linesRenderTargetScale);var linesHeight=~~(height*exports.linesRenderTargetScale);_linesRenderTarget.setSize(linesWidth,linesHeight);var i;var noDithering=!exports.useDithering;var amount=noDithering?linesWidth*linesHeight:_getDitheringAmount(linesWidth,linesHeight);var currentLen=_linesPositions.length/6;if(amount>currentLen){_linesPositions=new Float32Array(amount*6);_linesPositionAttribute=new THREE.BufferAttribute(_linesPositions,3);_linesGeometry.setAttribute("position",_linesPositionAttribute)}var i6=0;var x,y;var size=linesWidth*linesHeight;for(i=0;i<size;i++){x=i%linesWidth;y=~~(i/linesWidth);if(noDithering||x+(y&1)&1){_linesPositions[i6+0]=_linesPositions[i6+3]=(x+.5)/linesWidth;_linesPositions[i6+1]=_linesPositions[i6+4]=(y+.5)/linesHeight;_linesPositions[i6+2]=0;_linesPositions[i6+5]=.001+.999*Math.random();i6+=6}}_linesPositionAttribute.needsUpdate=true;_linesGeometry.drawRange.count=amount*2}_prevUseDithering=exports.useDithering;_prevUseSampling=exports.useSampling}function _getDitheringAmount(width,height){if(width&1&&height&1){return((width-1)*(height-1)>>1)+(width>>1)+(height>>1)}else{return width*height>>1}}function render(dt,renderTarget,toScreen){if(_prevUseDithering!==exports.useDithering){resize()}else if(_prevUseSampling!==exports.useSampling){resize()}var useSampling=exports.useSampling;var fpsRatio=1e3/(dt<16.667?16.667:dt)/exports.targetFPS;var state=fboHelper.getColorState();effectComposer.renderer.setClearColor(0,1);effectComposer.renderer.setRenderTarget(_motionRenderTarget);effectComposer.renderer.clear();effectComposer.renderer.setRenderTarget(null);effectComposer.scene.traverseVisible(_setObjectBeforeState);effectComposer.renderScene(_motionRenderTarget);for(var i=0,len=_visibleCache.length;i<len;i++){_setObjectAfterState(_visibleCache[i])}_visibleCache=[];if(!useSampling){_linesMaterial.uniforms.u_maxDistance.value=exports.maxDistance;_linesMaterial.uniforms.u_jitter.value=exports.jitter;_linesMaterial.uniforms.u_fadeStrength.value=exports.fadeStrength;_linesMaterial.uniforms.u_motionMultiplier.value=exports.motionMultiplier*fpsRatio;_linesMaterial.uniforms.u_depthTest.value=exports.depthTest;_linesMaterial.uniforms.u_opacity.value=exports.opacity;_linesMaterial.uniforms.u_leaning.value=Math.max(.001,Math.min(.999,exports.leaning));_linesMaterial.uniforms.u_depthBias.value=Math.max(1e-5,exports.depthBias);_linesMaterial.uniforms.u_texture.value=renderTarget.texture;effectComposer.renderer.setClearColor(0,0);effectComposer.renderer.setRenderTarget(_linesRenderTarget);effectComposer.renderer.clear();effectComposer.renderer.render(_linesScene,_linesCamera);effectComposer.renderer.setRenderTarget(null)}fboHelper.setColorState(state);if(useSampling){_samplingMaterial.uniforms.u_maxDistance.value=exports.maxDistance;_samplingMaterial.uniforms.u_fadeStrength.value=exports.fadeStrength;_samplingMaterial.uniforms.u_motionMultiplier.value=exports.motionMultiplier*fpsRatio;_samplingMaterial.uniforms.u_leaning.value=Math.max(.001,Math.min(.999,exports.leaning));_samplingMaterial.uniforms.u_texture.value=renderTarget.texture;effectComposer.render(_samplingMaterial,toScreen)}else{this.uniforms.u_lineAlphaMultiplier.value=1+exports.useDithering;_super.render.call(this,dt,renderTarget,toScreen)}}function _setObjectBeforeState(obj){if(obj.motionMaterial){obj._tmpMaterial=obj.material;obj.material=obj.motionMaterial;obj.material.uniforms.u_motionMultiplier.value=obj.material.motionMultiplier}else if(obj.material){obj.visible=false}_visibleCache.push(obj)}function _setObjectAfterState(obj){if(obj.motionMaterial){obj.material=obj._tmpMaterial;obj._tmpMaterial=undef;if(!exports.skipMatrixUpdate){obj.motionMaterial.uniforms.u_prevModelViewMatrix.value.copy(obj.modelViewMatrix)}}else{obj.visible=true}}},{1:1,26:26,30:30,32:32}],35:[function(require,module,exports){var effectComposer=require(32);var fxaa=require(33);var bloom=require(31);var motionBlur=require(34);var fboHelper=require(26);var undef;exports.init=init;exports.resize=resize;exports.render=render;exports.visualizeTarget=undef;var _renderer;var _scene;var _camera;function init(renderer,scene,camera){_renderer=renderer;_scene=scene;_camera=_camera;effectComposer.init(renderer,scene,camera);fxaa.init();effectComposer.queue.push(fxaa);motionBlur.init();effectComposer.queue.push(motionBlur);bloom.init();effectComposer.queue.push(bloom)}function resize(width,height){effectComposer.resize(width,height)}function render(dt){effectComposer.renderQueue(dt);if(exports.visualizeTarget){fboHelper.copy(exports.visualizeTarget)}}},{26:26,31:31,32:32,33:33,34:34}],36:[function(require,module,exports){var settings=require(37);var THREE=window.THREE;var undef;var glslify=require(1);var shaderParse=require(38);var _copyShader;var _positionShader;var _textureDefaultPosition;var _positionRenderTarget;var _positionRenderTarget2;var _renderer;var _mesh;var _scene;var _camera;var _followPoint;var _followPointTime=0;var TEXTURE_WIDTH=exports.TEXTURE_WIDTH=settings.simulatorTextureWidth;var TEXTURE_HEIGHT=exports.TEXTURE_HEIGHT=settings.simulatorTextureHeight;var AMOUNT=exports.AMOUNT=TEXTURE_WIDTH*TEXTURE_HEIGHT;exports.init=init;exports.update=update;exports.initAnimation=0;exports.positionRenderTarget=undef;exports.prevPositionRenderTarget=undef;exports.setPattern=patternName=>{if(patterns[patternName]){currentPattern=patternName}};const patterns={default:(time,r,h)=>({x:Math.cos(time)*r,y:Math.cos(time*4)*h,z:Math.sin(time*2)*r}),circle:(time,r,h)=>({x:Math.cos(time)*r,y:Math.sin(time*2)*h,z:Math.sin(time)*r}),spiral:(time,r,h)=>({x:Math.cos(time)*r*(1-time*.1%1),y:time*10%h,z:Math.sin(time)*r*(1-time*.1%1)}),still:(time,r,h)=>({x:r*.5,y:0,z:r*.5})};var currentPattern="default";function init(renderer){_renderer=renderer;_followPoint=new THREE.Vector3;var rawShaderPrefix="precision "+renderer.capabilities.precision+" float;\n";var gl=_renderer.getContext();if(!gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)){alert("No support for vertex shader textures!");return}_scene=new THREE.Scene;_camera=new THREE.Camera;_camera.position.z=1;_copyShader=new THREE.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(TEXTURE_WIDTH,TEXTURE_HEIGHT)},texture:{type:"t",value:undef}},vertexShader:rawShaderPrefix+shaderParse(glslify(["#define GLSLIFY 1\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n"])),fragmentShader:rawShaderPrefix+shaderParse(glslify(["#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n    gl_FragColor = texture2D( texture, uv );\n}\n"]))});_positionShader=new THREE.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(TEXTURE_WIDTH,TEXTURE_HEIGHT)},texturePosition:{type:"t",value:undef},textureDefaultPosition:{type:"t",value:undef},mouse3d:{type:"v3",value:new THREE.Vector3},speed:{type:"f",value:1},dieSpeed:{type:"f",value:0},radius:{type:"f",value:0},curlSize:{type:"f",value:0},attraction:{type:"f",value:0},time:{type:"f",value:0},initAnimation:{type:"f",value:0}},vertexShader:rawShaderPrefix+shaderParse(glslify(["#define GLSLIFY 1\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n"])),fragmentShader:rawShaderPrefix+shaderParse(glslify(["#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D texturePosition;\nuniform sampler2D textureDefaultPosition;\nuniform float time;\nuniform float speed;\nuniform float dieSpeed;\nuniform float radius;\nuniform float curlSize;\nuniform float attraction;\nuniform float initAnimation;\nuniform vec3 mouse3d;\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n    return p;\n}\n\n#define F4 0.309016994374947451\n\nvec4 simplexNoiseDerivatives (vec4 v) {\n    const vec4  C = vec4( 0.138196601125011,0.276393202250021,0.414589803375032,-0.447213595499958);\n\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    i = mod289(i);\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n    vec3 values0 = vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)); //value of contributions from each corner at point\n    vec2 values1 = vec2(dot(p3, x3), dot(p4, x4));\n\n    vec3 m0 = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0); //(0.5 - x^2) where x is the distance\n    vec2 m1 = max(0.5 - vec2(dot(x3,x3), dot(x4,x4)), 0.0);\n\n    vec3 temp0 = -6.0 * m0 * m0 * values0;\n    vec2 temp1 = -6.0 * m1 * m1 * values1;\n\n    vec3 mmm0 = m0 * m0 * m0;\n    vec2 mmm1 = m1 * m1 * m1;\n\n    float dx = temp0[0] * x0.x + temp0[1] * x1.x + temp0[2] * x2.x + temp1[0] * x3.x + temp1[1] * x4.x + mmm0[0] * p0.x + mmm0[1] * p1.x + mmm0[2] * p2.x + mmm1[0] * p3.x + mmm1[1] * p4.x;\n    float dy = temp0[0] * x0.y + temp0[1] * x1.y + temp0[2] * x2.y + temp1[0] * x3.y + temp1[1] * x4.y + mmm0[0] * p0.y + mmm0[1] * p1.y + mmm0[2] * p2.y + mmm1[0] * p3.y + mmm1[1] * p4.y;\n    float dz = temp0[0] * x0.z + temp0[1] * x1.z + temp0[2] * x2.z + temp1[0] * x3.z + temp1[1] * x4.z + mmm0[0] * p0.z + mmm0[1] * p1.z + mmm0[2] * p2.z + mmm1[0] * p3.z + mmm1[1] * p4.z;\n    float dw = temp0[0] * x0.w + temp0[1] * x1.w + temp0[2] * x2.w + temp1[0] * x3.w + temp1[1] * x4.w + mmm0[0] * p0.w + mmm0[1] * p1.w + mmm0[2] * p2.w + mmm1[0] * p3.w + mmm1[1] * p4.w;\n\n    return vec4(dx, dy, dz, dw) * 49.0;\n}\n\nvec3 curl( in vec3 p, in float noiseTime, in float persistence ) {\n\n    vec4 xNoisePotentialDerivatives = vec4(0.0);\n    vec4 yNoisePotentialDerivatives = vec4(0.0);\n    vec4 zNoisePotentialDerivatives = vec4(0.0);\n\n    for (int i = 0; i < 3; ++i) {\n\n        float twoPowI = pow(2.0, float(i));\n        float scale = 0.5 * twoPowI * pow(persistence, float(i));\n\n        xNoisePotentialDerivatives += simplexNoiseDerivatives(vec4(p * twoPowI, noiseTime)) * scale;\n        yNoisePotentialDerivatives += simplexNoiseDerivatives(vec4((p + vec3(123.4, 129845.6, -1239.1)) * twoPowI, noiseTime)) * scale;\n        zNoisePotentialDerivatives += simplexNoiseDerivatives(vec4((p + vec3(-9519.0, 9051.0, -123.0)) * twoPowI, noiseTime)) * scale;\n    }\n\n    return vec3(\n        zNoisePotentialDerivatives[1] - yNoisePotentialDerivatives[2],\n        xNoisePotentialDerivatives[2] - zNoisePotentialDerivatives[0],\n        yNoisePotentialDerivatives[0] - xNoisePotentialDerivatives[1]\n    );\n\n}\n\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec4 positionInfo = texture2D( texturePosition, uv );\n    vec3 position = mix(vec3(0.0, -200.0, 0.0), positionInfo.xyz, smoothstep(0.0, 0.3, initAnimation));\n    float life = positionInfo.a - dieSpeed;\n\n    vec3 followPosition = mix(vec3(0.0, -(1.0 - initAnimation) * 200.0, 0.0), mouse3d, smoothstep(0.2, 0.7, initAnimation));\n\n    if(life < 0.0) {\n        positionInfo = texture2D( textureDefaultPosition, uv );\n        position = positionInfo.xyz * (1.0 + sin(time * 15.0) * 0.2 + (1.0 - initAnimation)) * 0.4 * radius;\n        position += followPosition;\n        life = 0.5 + fract(positionInfo.w * 21.4131 + time);\n    } else {\n        vec3 delta = followPosition - position;\n        position += delta * (0.005 + life * 0.01) * attraction * (1.0 - smoothstep(50.0, 350.0, length(delta))) *speed;\n        position += curl(position * curlSize, time, 0.1 + (1.0 - life) * 0.1) *speed;\n    }\n\n    gl_FragColor = vec4(position, life);\n\n}\n"])),blending:THREE.NoBlending,transparent:false,depthWrite:false,depthTest:false});_mesh=new THREE.Mesh(new THREE.PlaneGeometry(2,2),_copyShader);_scene.add(_mesh);_positionRenderTarget=new THREE.WebGLRenderTarget(TEXTURE_WIDTH,TEXTURE_HEIGHT,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:THREE.FloatType,depthWrite:false,depthBuffer:false,stencilBuffer:false});_positionRenderTarget2=_positionRenderTarget.clone();var texture=_createPositionTexture();_copyTexture(texture,_positionRenderTarget);_copyTexture(texture,_positionRenderTarget2)}function _copyTexture(input,output){_mesh.material=_copyShader;_copyShader.uniforms.texture.value=input;_renderer.setRenderTarget(output);_renderer.render(_scene,_camera);_renderer.setRenderTarget(null)}function _updatePosition(dt){var tmp=_positionRenderTarget;_positionRenderTarget=_positionRenderTarget2;_positionRenderTarget2=tmp;_mesh.material=_positionShader;_positionShader.uniforms.textureDefaultPosition.value=_textureDefaultPosition;_positionShader.uniforms.texturePosition.value=_positionRenderTarget2.texture;_positionShader.uniforms.time.value+=dt*.001;_renderer.setRenderTarget(_positionRenderTarget);_renderer.render(_scene,_camera);_renderer.setRenderTarget(null)}function _createPositionTexture(){var positions=new Float32Array(AMOUNT*4);var i4;var r,phi,theta;for(var i=0;i<AMOUNT;i++){i4=i*4;r=(.5+Math.random()*.5)*50;phi=(Math.random()-.5)*Math.PI;theta=Math.random()*Math.PI*2;positions[i4+0]=r*Math.cos(theta)*Math.cos(phi);positions[i4+1]=r*Math.sin(phi);positions[i4+2]=r*Math.sin(theta)*Math.cos(phi);positions[i4+3]=Math.random()}var texture=new THREE.DataTexture(positions,TEXTURE_WIDTH,TEXTURE_HEIGHT,THREE.RGBAFormat,THREE.FloatType);texture.minFilter=THREE.NearestFilter;texture.magFilter=THREE.NearestFilter;texture.needsUpdate=true;texture.generateMipmaps=false;texture.flipY=false;_textureDefaultPosition=texture;return texture}function update(dt){if(settings.speed||settings.dieSpeed){var r=200;var h=60;if(settings.isMobile){r=100;h=40}var autoClearColor=_renderer.autoClearColor;var clearColor=_renderer.getClearColor(new THREE.Color).getHex();var clearAlpha=_renderer.getClearAlpha();_renderer.autoClearColor=false;var deltaRatio=dt/16.6667;_positionShader.uniforms.speed.value=settings.speed*deltaRatio;_positionShader.uniforms.dieSpeed.value=settings.dieSpeed*deltaRatio;_positionShader.uniforms.radius.value=settings.radius;_positionShader.uniforms.curlSize.value=settings.curlSize;_positionShader.uniforms.attraction.value=settings.attraction;_positionShader.uniforms.initAnimation.value=exports.initAnimation;if(settings.followMouse){_positionShader.uniforms.mouse3d.value.copy(settings.mouse3d)}else{_followPointTime+=dt*.001*settings.speed;const pattern=patterns[currentPattern];const pos=pattern(_followPointTime,r,h);_followPoint.set(pos.x,pos.y,pos.z);_positionShader.uniforms.mouse3d.value.lerp(_followPoint,.2)}_updatePosition(dt);_renderer.setClearColor(clearColor,clearAlpha);_renderer.autoClearColor=autoClearColor;exports.positionRenderTarget=_positionRenderTarget;exports.prevPositionRenderTarget=_positionRenderTarget2}}},{1:1,37:37,38:38}],37:[function(require,module,exports){var parse=require(21);var keys=require(15);var query=exports.query=parse(window.location.href.replace("#","?"));var amountMap={"4k":[64,64,.29],"8k":[128,64,.42],"16k":[128,128,.48],"32k":[256,128,.55],"65k":[256,256,.6],"131k":[512,256,.85],"252k":[512,512,1.2],"524k":[1024,512,1.4],"1m":[1024,1024,1.6],"2m":[2048,1024,2],"4m":[2048,2048,2.5]};exports.amountList=keys(amountMap);query.amount=amountMap[query.amount]?query.amount:exports.isMobile?"16k":"65k";var amountInfo=amountMap[query.amount];exports.speed=1;exports.dieSpeed=.015;exports.radius=amountInfo[2]*1.3;exports.curlSize=.02;exports.attraction=1;exports.color1="#6998AB";exports.color2="#B1D0E0";exports.lightIntensity=.01;exports.followMouse=true;exports.useStats=false;exports.isMobile=/(iPad|iPhone|Android)/i.test(navigator.userAgent);exports.simulatorTextureWidth=amountInfo[0];exports.simulatorTextureHeight=amountInfo[1];exports.useTriangleParticles=true;exports.showFloor=true;exports.bgColor="#1A374D";exports.fxaa=false;var motionBlurQualityMap=exports.motionBlurQualityMap={best:1,high:.5,medium:1/3,low:.25};exports.motionBlurQualityList=keys(motionBlurQualityMap);query.motionBlurQuality=motionBlurQualityMap[query.motionBlurQuality]?query.motionBlurQuality:"medium";exports.motionBlur=false;exports.motionBlurPause=true;exports.bloom=false},{15:15,21:21}],38:[function(require,module,exports){var THREE=window.THREE;var threeChunkReplaceRegExp=/\/\/\s?chunk_replace\s(.+)([\d\D]+)\/\/\s?end_chunk_replace/gm;var threeChunkRegExp=/\/\/\s?chunk\(\s?(\w+)\s?\);/g;var glslifyGlobalRegExp=/GLOBAL_VAR_([^_\.\)\;\,\s]+)(_\d+)?/g;var _chunkReplaceObj;function _storeChunkReplaceParse(shader){_chunkReplaceObj={};return shader.replace(threeChunkReplaceRegExp,_storeChunkReplaceFunc)}function _threeChunkParse(shader){return shader.replace(threeChunkRegExp,_replaceThreeChunkFunc)}function _glslifyGlobalParse(shader){return shader.replace(glslifyGlobalRegExp,_returnFirst)}function _storeChunkReplaceFunc(a,b,c){_chunkReplaceObj[b.trim()]=c;return""}function _replaceThreeChunkFunc(a,b){var str=THREE.ShaderChunk[b]+"\n";for(var id in _chunkReplaceObj){str=str.replace(id,_chunkReplaceObj[id])}return str}function _returnFirst(a,b){return b}function parse(shader){shader=_storeChunkReplaceParse(shader);shader=_threeChunkParse(shader);return _glslifyGlobalParse(shader)}module.exports=parse},{}],39:[function(require,module,exports){var raf=require(25);var undef;var _width=0;var _height=0;var _camera;var _scene;var _renderer;var _time=0;var _ray;var _initAnimation=0;var _bgColor;var _currentCameraPosition;var _targetCameraPosition;var _cameraLerpFactor=.05;var motionBlur;var fxaa;var bloom;var fboHelper;var simulator;var particles;var lights;var floor;var settings;var postprocessing;var math;var settings;function initTHREE(externalTHREE){if(!externalTHREE){throw new Error("THREE must be provided to initialize the WebGL experience")}window.THREE=externalTHREE;THREE=externalTHREE;return window.THREE}function init(externalTHREE,container){initTHREE(externalTHREE);_ray=new THREE.Ray;_currentCameraPosition=new THREE.Vector3;_targetCameraPosition=new THREE.Vector3;settings=require(37);math=require(41);var ease=require(40);var encode=require(19);postprocessing=require(35);motionBlur=require(34);fxaa=require(33);bloom=require(31);fboHelper=require(26);simulator=require(36);particles=require(29);lights=require(28);floor=require(27);_bgColor=new THREE.Color(settings.bgColor);settings.mouse=new THREE.Vector2(0,0);settings.mouse3d=_ray.origin;_renderer=new THREE.WebGLRenderer({antialias:true});_renderer.setClearColor(settings.bgColor);_renderer.shadowMap.enabled=true;_renderer.shadowMap.type=THREE.PCFSoftShadowMap;container.appendChild(_renderer.domElement);_scene=new THREE.Scene;_scene.fog=new THREE.FogExp2(settings.bgColor,.001);_camera=new THREE.PerspectiveCamera(45,1,10,3e3);_camera.position.set(0,200,45);_camera.lookAt(0,0,0);_currentCameraPosition.copy(_camera.position);_targetCameraPosition.copy(_camera.position);settings.camera=_camera;settings.cameraPosition=_camera.position;fboHelper.init(_renderer);postprocessing.init(_renderer,_scene,_camera);simulator.init(_renderer);particles.init(_renderer);_scene.add(particles.container);lights.init(_renderer);_scene.add(lights.mesh);_scene.add(new THREE.PointLightHelper(lights.pointLight));floor.init(_renderer);floor.mesh.position.y=-100;_scene.add(floor.mesh);window.addEventListener("resize",_onResize);window.addEventListener("mousemove",_onMove);window.addEventListener("touchmove",_bindTouch(_onMove));window.addEventListener("keyup",_onKeyUp);_time=Date.now();_onResize();_loop()}function _onKeyUp(evt){if(evt.keyCode===32){settings.speed=settings.speed===0?1:0;settings.dieSpeed=settings.dieSpeed===0?.015:0}}function _bindTouch(func){return function(evt){if(settings.isMobile&&evt.preventDefault){evt.preventDefault()}func(evt.changedTouches[0])}}function _onMove(evt){settings.mouse.x=evt.clientX/_width*2-1;settings.mouse.y=-evt.clientY/_height*2+1}function _onResize(){_width=window.innerWidth;_height=window.innerHeight;postprocessing.resize(_width,_height)}function _loop(){var newTime=Date.now();raf(_loop);_render(newTime-_time,newTime);_time=newTime}function _render(dt,newTime){_currentCameraPosition.x+=(_targetCameraPosition.x-_currentCameraPosition.x)*_cameraLerpFactor;_currentCameraPosition.y+=(_targetCameraPosition.y-_currentCameraPosition.y)*_cameraLerpFactor;_currentCameraPosition.z+=(_targetCameraPosition.z-_currentCameraPosition.z)*_cameraLerpFactor;_camera.position.copy(_currentCameraPosition);_camera.lookAt(0,0,0);motionBlur.skipMatrixUpdate=!(settings.dieSpeed||settings.speed)&&settings.motionBlurPause;var ratio;_bgColor.setStyle(settings.bgColor);var tmpColor=floor.mesh.material.color;tmpColor=_bgColor;_scene.fog.color.copy(tmpColor);_renderer.setClearColor(tmpColor.getHex());_initAnimation=Math.min(_initAnimation+dt*25e-5,1);simulator.initAnimation=_initAnimation;lights.update(dt,_camera);floor.mesh.visible=settings.showFloor;_camera.updateMatrixWorld();_ray.origin.setFromMatrixPosition(_camera.matrixWorld);_ray.direction.set(settings.mouse.x,settings.mouse.y,.5).unproject(_camera).sub(_ray.origin).normalize();var distance=_ray.origin.length()/Math.cos(Math.PI-_ray.direction.angleTo(_ray.origin));_ray.origin.add(_ray.direction.multiplyScalar(distance*1));simulator.update(dt);particles.update(dt);ratio=Math.min((1-Math.abs(_initAnimation-.5)*2)*1.2,1);var blur=(1-ratio)*10;if(ratio){ratio=.8+Math.pow(_initAnimation,1.5)*.5;if(_width<580)ratio*=.5}ratio=math.unLerp(.5,.6,_initAnimation);fxaa.enabled=!!settings.fxaa;motionBlur.enabled=!!settings.motionBlur;bloom.enabled=!!settings.bloom;postprocessing.render(dt,newTime)}module.exports={init:init,initTHREE:initTHREE,updateSettings:function(newSettings){settings.speed=newSettings.speed;settings.dieSpeed=newSettings.dieSpeed;settings.bgColor=newSettings.bgColor;settings.followMouse=newSettings.followMouse;settings.showFloor=newSettings.showFloor;settings.attraction=newSettings.attraction;settings.color1=newSettings.color1;settings.color2=newSettings.color2;settings.curlSize=newSettings.curlSize;settings.radius=newSettings.radius;settings.lightIntensity=newSettings.lightIntensity;settings.simulatorTextureWidth=newSettings.simulatorTextureWidth;settings.simulatorTextureHeight=newSettings.simulatorTextureHeight;if(newSettings.cameraTransitionSpeed!==undefined){_cameraLerpFactor=1-Math.pow(.1,1/(newSettings.cameraTransitionSpeed*60))}if(newSettings.cameraX!==undefined&&newSettings.cameraY!==undefined&&newSettings.cameraZ!==undefined){_targetCameraPosition.set(newSettings.cameraX,newSettings.cameraY,newSettings.cameraZ)}if(newSettings.pattern){simulator.setPattern(newSettings.pattern)}}}},{19:19,25:25,26:26,27:27,28:28,29:29,31:31,33:33,34:34,35:35,36:36,37:37,40:40,41:41}],40:[function(require,module,exports){var basic={Linear:{None:function(e){return e}},Quad:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){if((e*=2)<1)return.5*e*e;return-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){if((e*=2)<1)return.5*e*e*e;return.5*((e-=2)*e*e+2)}},Quart:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){if((e*=2)<1)return.5*e*e*e*e;return-.5*((e-=2)*e*e*e-2)}},Quint:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){if((e*=2)<1)return.5*e*e*e*e*e;return.5*((e-=2)*e*e*e*e+2)}},Sine:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Expo:{In:function(e){return e===0?0:Math.pow(1024,e-1)},Out:function(e){return e===1?1:1-Math.pow(2,-10*e)},InOut:function(e){if(e===0)return 0;if(e===1)return 1;if((e*=2)<1)return.5*Math.pow(1024,e-1);return.5*(-Math.pow(2,-10*(e-1))+2)}},Circ:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){if((e*=2)<1)return-.5*(Math.sqrt(1-e*e)-1);return.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){var t,n=.1,r=.4;if(e===0)return 0;if(e===1)return 1;if(!n||n<1){n=1;t=r/4}else t=r*Math.asin(1/n)/(2*Math.PI);return-(n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*2*Math.PI/r))},Out:function(e){var t,n=.1,r=.4;if(e===0)return 0;if(e===1)return 1;if(!n||n<1){n=1;t=r/4}else t=r*Math.asin(1/n)/(2*Math.PI);return n*Math.pow(2,-10*e)*Math.sin((e-t)*2*Math.PI/r)+1},InOut:function(e){var t,n=.1,r=.4;if(e===0)return 0;if(e===1)return 1;if(!n||n<1){n=1;t=r/4}else{t=r*Math.asin(1/n)/(2*Math.PI)}if((e*=2)<1)return-.5*n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*2*Math.PI/r);return n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*2*Math.PI/r)*.5+1}},Back:{In:function(e){var t=1.70158;return e*e*((t+1)*e-t)},Out:function(e){var t=1.70158;return--e*e*((t+1)*e+t)+1},InOut:function(e){var t=1.70158*1.525;if((e*=2)<1)return.5*e*e*((t+1)*e-t);return.5*((e-=2)*e*((t+1)*e+t)+2)}},Bounce:{In:function(e){return 1-basic.Bounce.Out(1-e)},Out:function(e){if(e<1/2.75){return 7.5625*e*e}else if(e<2/2.75){return 7.5625*(e-=1.5/2.75)*e+.75}else if(e<2.5/2.75){return 7.5625*(e-=2.25/2.75)*e+.9375}else{return 7.5625*(e-=2.625/2.75)*e+.984375}},InOut:function(e){if(e<.5)return basic.Bounce.In(e*2)*.5;return basic.Bounce.Out(e*2-1)*.5+.5}}};exports.basic=basic;exports.linear=basic.Linear;var id,list;for(id in basic){if(id!=="Linear"){list=basic[id];exports["easeIn"+id]=list.In;exports["easeOut"+id]=list.Out;exports["easeInOut"+id]=list.InOut}}},{}],41:[function(require,module,exports){for(var id in Math){exports[id]=Math[id]}exports.step=step;exports.smoothstep=smoothstep;exports.clamp=clamp;exports.mix=exports.lerp=mix;exports.unMix=exports.unLerp=unMix;exports.unClampedMix=exports.unClampedLerp=unClampedMix;exports.upClampedUnMix=exports.unClampedUnLerp=upClampedUnMix;exports.fract=fract;exports.hash=hash;exports.hash2=hash2;exports.sign=sign;var PI=Math.PI;var TAU=exports.TAU=PI*2;function step(edge,val){return val<edge?0:1}function smoothstep(edge0,edge1,val){val=unMix(edge0,edge1,val);return val*val(3-val*2)}function clamp(val,min,max){return val<min?min:val>max?max:val}function mix(min,max,val){return val<=0?min:val>=1?max:min+(max-min)*val}function unMix(min,max,val){return val<=min?0:val>=max?1:(val-min)/(max-min)}function unClampedMix(min,max,val){return min+(max-min)*val}function upClampedUnMix(min,max,val){return(val-min)/(max-min)}function fract(val){return val-Math.floor(val)}function hash(val){return fract(Math.sin(val)*43758.5453123)}function hash2(val1,val2){return fract(Math.sin(val1*12.9898+val2*4.1414)*43758.5453)}function sign(val){return val?val<0?-1:1:0}},{}]},{},[39])(39)});