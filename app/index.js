!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).spiritWebgl=e()}(function(){return function r(i,o,a){function u(n,e){if(!o[n]){if(!i[n]){var t="function"==typeof require&&require;if(!e&&t)return t(n,!0);if(l)return l(n,!0);throw(e=new Error("Cannot find module '"+n+"'")).code="MODULE_NOT_FOUND",e}t=o[n]={exports:{}},i[n][0].call(t.exports,function(e){return u(i[n][1][e]||e)},t,t.exports,r,i,o,a)}return o[n].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)u(a[e]);return u}({1:[function(e,n,t){n.exports=function(e){"string"==typeof e&&(e=[e]);for(var n=[].slice.call(arguments,1),t=[],r=0;r<e.length-1;r++)t.push(e[r],n[r]||"");return t.push(e[r]),t.join("")}},{}],2:[function(e,n,t){n.exports=function(e,n,t){if(null!=e)for(var r=-1,i=e.length;++r<i&&!1!==n.call(t,e[r],r,e););}},{}],3:[function(e,n,t){n.exports=function(e,n,t){for(var r=e.length,i=(n=null==n?0:n<0?Math.max(r+n,0):Math.min(n,r),t=null==t?r:t<0?Math.max(r+t,0):Math.min(t,r),[]);n<t;)i.push(e[n++]);return i}},{}],4:[function(e,n,t){var r=e(10),i=e(9),o=e(17);n.exports=function(e){switch(r(e)){case"Object":return i(n=e)?o({},n):n;case"Array":return e.slice();case"RegExp":return n="",n=(n+=e.multiline?"m":"")+(e.global?"g":"")+(e.ignoreCase?"i":""),new RegExp(e.source,n);case"Date":return new Date(+e);default:return e}var n}},{10:10,17:17,9:9}],5:[function(e,n,t){var c=e(4),v=e(13),m=e(10),d=e(9);function f(e,n){switch(m(e)){case"Object":var t,r=e,i=n;return d(r)?(v(r,function(e,n){this[n]=f(e,i)},t={}),t):i?i(r):r;case"Array":for(var o=e,a=n,u=[],l=-1,s=o.length;++l<s;)u[l]=f(o[l],a);return u;default:return c(e)}}n.exports=f},{10:10,13:13,4:4,9:9}],6:[function(e,n,t){var r=e(7),e=Array.isArray||function(e){return r(e,"Array")};n.exports=e},{7:7}],7:[function(e,n,t){var r=e(10);n.exports=function(e,n){return r(e)===n}},{10:10}],8:[function(e,n,t){var r=e(7);n.exports=function(e){return r(e,"Object")}},{7:7}],9:[function(e,n,t){n.exports=function(e){return!!e&&"object"==typeof e&&e.constructor===Object}},{}],10:[function(e,n,t){n.exports=function(e){return Object.prototype.toString.call(e).slice(8,-1)}},{}],11:[function(e,n,t){var r=e(2),i=e(3),o=e(13);n.exports=function(t,e){return r(i(arguments,1),function(e){o(e,function(e,n){null==t[n]&&(t[n]=e)})}),t}},{13:13,2:2,3:3}],12:[function(e,n,t){var l,s,c=e(14);function v(e,n,t,r){return e.call(r,n[t],t,n)}n.exports=function(e,n,t){var r,i=0;if(null==l)for(var o in s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=!0,{toString:null})l=!1;for(r in e)if(!1===v(n,e,r,t))break;if(l)for(var a=e.constructor,u=!!a&&e===a.prototype;(r=s[i++])&&("constructor"===r&&(u||!c(e,r))||e[r]===Object.prototype[r]||!1!==v(n,e,r,t)););}},{14:14}],13:[function(e,n,t){var o=e(14),a=e(12);n.exports=function(t,r,i){a(t,function(e,n){if(o(t,n))return r.call(i,t[n],n,t)})}},{12:12,14:14}],14:[function(e,n,t){n.exports=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)}},{}],15:[function(e,n,t){var r=e(13),e=Object.keys||function(e){var t=[];return r(e,function(e,n){t.push(n)}),t};n.exports=e},{13:13}],16:[function(e,n,t){var a=e(14),u=e(5),l=e(8);n.exports=function e(){for(var n,t,r,i=1,o=u(arguments[0]);r=arguments[i++];)for(n in r)a(r,n)&&(t=r[n],l(t)&&l(o[n])?o[n]=e(o[n],t):o[n]=u(t));return o}},{14:14,5:5,8:8}],17:[function(e,n,t){var o=e(13);function a(e,n){this[n]=e}n.exports=function(e,n){for(var t,r=0,i=arguments.length;++r<i;)null!=(t=arguments[r])&&o(t,a,e);return e}},{13:13}],18:[function(e,n,t){var l=e(22),s=e(6),c=e(14);n.exports=function(e,n){for(var t,r,i,o=(e||"").replace("?","").split("&"),a=-1,u={};r=o[++a];)t=r.indexOf("="),i=r.substring(0,t),r=decodeURIComponent(r.substring(t+1)),!1!==n&&(r=l(r)),c(u,i)?s(u[i])?u[i].push(r):u[i]=[u[i],r]:u[i]=r;return u}},{14:14,22:22,6:6}],19:[function(e,n,t){var o=e(13),a=e(6),u=e(2);n.exports=function(e){var t,r,i=[];return o(e,function(e,n){a(e)?(t=n+"=",r=new RegExp("&"+n+"+=$"),u(e,function(e){t+=encodeURIComponent(e)+"&"+n+"="}),i.push(t.replace(r,""))):i.push(n+"="+encodeURIComponent(e))}),i.length?"?"+i.join("&"):""}},{13:13,2:2,6:6}],20:[function(e,n,t){n.exports=function(e){return(e=/\?[a-zA-Z0-9\=\&\%\$\-\_\.\+\!\*\'\(\)\,]+/.exec(e))?decodeURIComponent(e[0].replace(/\+/g," ")):""}},{}],21:[function(e,n,t){var r=e(18),i=e(20);n.exports=function(e,n){return r(i(e),n)}},{18:18,20:20}],22:[function(e,n,t){n.exports=function(e){return e=null===e||"null"===e?null:"true"===e||"false"!==e&&(void 0===e||"undefined"===e?void 0:""===e||isNaN(e)?e:parseFloat(e))}},{}],23:[function(e,u,n){!function(a){!function(){!function(){var e,n,t,r,i,o;"undefined"!=typeof performance&&null!==performance&&performance.now?u.exports=function(){return performance.now()}:null!=a&&a.hrtime?(u.exports=function(){return(e()-i)/1e6},n=a.hrtime,r=(e=function(){var e=n();return 1e9*e[0]+e[1]})(),o=1e9*a.uptime(),i=r-o):t=Date.now?(u.exports=function(){return Date.now()-t},Date.now()):(u.exports=function(){return(new Date).getTime()-t},(new Date).getTime())}.call(this)}.call(this)}.call(this,e(24))},{24:24}],24:[function(e,n,t){var r,i,n=n.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}function u(n){if(r===setTimeout)return setTimeout(n,0);if((r===o||!r)&&setTimeout)return(r=setTimeout)(n,0);try{return r(n,0)}catch(e){try{return r.call(null,n,0)}catch(e){return r.call(this,n,0)}}}var l,s=[],c=!1,v=-1;function m(){c&&l&&(c=!1,l.length?s=l.concat(s):v=-1,s.length)&&d()}function d(){if(!c){for(var e=u(m),n=(c=!0,s.length);n;){for(l=s,s=[];++v<n;)l&&l[v].run();v=-1,n=s.length}l=null,c=!1,!function(n){if(i===clearTimeout)return clearTimeout(n);if((i===a||!i)&&clearTimeout)return(i=clearTimeout)(n);try{i(n)}catch(e){try{return i.call(null,n)}catch(e){return i.call(this,n)}}}(e)}}function f(e,n){this.fun=e,this.array=n}function p(){}n.nextTick=function(e){var n=new Array(arguments.length-1);if(1<arguments.length)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];s.push(new f(e,n)),1!==s.length||c||u(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},{}],25:[function(v,m,e){!function(c){!function(){for(var r,i,o,a=v(23),n="undefined"==typeof window?c:window,e=["moz","webkit"],t="AnimationFrame",u=n["request"+t],l=n["cancel"+t]||n["cancelRequest"+t],s=0;!u&&s<e.length;s++)u=n[e[s]+"Request"+t],l=n[e[s]+"Cancel"+t]||n[e[s]+"CancelRequest"+t];u&&l||(i=r=0,o=[],u=function(e){var n,t;return 0===o.length&&(n=a(),t=Math.max(0,1e3/60-(n-r)),r=t+n,setTimeout(function(){for(var e=o.slice(0),n=o.length=0;n<e.length;n++)if(!e[n].cancelled)try{e[n].callback(r)}catch(e){setTimeout(function(){throw e},0)}},Math.round(t))),o.push({handle:++i,callback:e,cancelled:!1}),i},l=function(e){for(var n=0;n<o.length;n++)o[n].handle===e&&(o[n].cancelled=!0)}),m.exports=function(e){return u.call(n,e)},m.exports.cancel=function(){l.apply(n,arguments)},m.exports.polyfill=function(e){(e=e||n).requestAnimationFrame=u,e.cancelAnimationFrame=l}}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{23:23}],26:[function(e,n,t){var r,i,o,a,u,l,s=window.THREE,c=e(1),v=(t.rawShaderPrefix=r,t.vertexShader=r,t.copyMaterial=r);t.init=function(e){i||(i=e,l=t.rawShaderPrefix="precision "+i.capabilities.precision+" float;\n",a=new s.Scene,(u=new s.Camera).position.z=1,v=t.copyMaterial=new s.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:r}},vertexShader:t.vertexShader=l+c(["#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 v_uv;\n\nvoid main() {\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n"]),fragmentShader:l+c(["#define GLSLIFY 1\nuniform sampler2D u_texture;\n\nvarying vec2 v_uv;\n\nvoid main() {\n    gl_FragColor = texture2D( u_texture, v_uv );\n}\n"])}),o=new s.Mesh(new s.PlaneGeometry(2,2),v),a.add(o))},t.copy=function(e,n){(o.material=v).uniforms.u_texture.value=e,n?(i.setRenderTarget(n),i.render(a,u),i.setRenderTarget(null)):i.render(a,u)},t.render=function(e,n){o.material=e,n?(i.setRenderTarget(n),i.render(a,u),i.setRenderTarget(null)):i.render(a,u)},t.createRenderTarget=function(e,n,t,r,i,o){e=new s.WebGLRenderTarget(e||1,n||1,{format:t||s.RGBFormat,type:r||s.UnsignedByteType,minFilter:i||s.LinearFilter,magFilter:o||s.LinearFilter});return e.texture.generateMipMaps=!1,e},t.getColorState=function(){return{autoClearColor:i.autoClearColor,clearColor:i.getClearColor(new s.Color).getHex(),clearAlpha:i.getClearAlpha()}},t.setColorState=function(e){i.setClearColor(e.clearColor,e.clearAlpha),i.autoClearColor=e.autoClearColor}},{1:1}],27:[function(e,n,t){e(37);var r=window.THREE;t.mesh=void 0,t.init=function(){var e=new r.PlaneGeometry(4e3,4e3,10,10),n=new r.MeshStandardMaterial({roughness:.7,color:0,emissive:0}),e=t.mesh=new r.Mesh(e,n);e.rotation.x=-1.57,e.receiveShadow=!0}},{37:37}],28:[function(e,n,t){var r=e(37),i=window.THREE,o=t.mesh=void 0,a=t.pointLight=void 0,u=(t.init=function(){(o=t.mesh=new i.Object3D).position.set(0,500,0);var e=new i.AmbientLight(3355443),e=(o.add(e),(a=t.pointLight=new i.PointLight(16777215,u,700)).castShadow=!0,a.shadow.mapSize.width=4096,a.shadow.mapSize.height=2048,a.shadow.camera.near=10,a.shadow.camera.far=700,a.shadow.bias=-.001,o.add(a),new i.DirectionalLight(12225419,.5)),e=(e.position.set(1,1,1),o.add(e),new i.DirectionalLight(9157300,.3));e.position.set(1,1,-1),o.add(e)},t.update=function(e){var n=Math.min(Math.max(r.shadowDarkness,0),1);n<=0?(a.castShadow=!1,u=1):(a.castShadow=!0,u+=.1*(+n-u));a.intensity=u},1)},{37:37}],29:[function(e,n,t){var s,r,i,o,c,v,a,m=e(37),d=window.THREE,f=e(38),p=e(1),u=e(36),g=(e(17),e(11),t.container=s),x=(t.init=function(e){g=t.container=new d.Object3D,a=new d.Color,c=new d.Color(m.color1),v=new d.Color(m.color2),o=[i=(()=>{for(var e,n,t=new Float32Array(3*_*3),r=new Float32Array(3*_*3),i=new Float32Array(2*_*3),o=Math.PI,a=2*o/3,u=[Math.sin(2*a+o),Math.cos(2*a+o),Math.sin(a+o),Math.cos(a+o),Math.sin(3*a+o),Math.cos(3*a+o),Math.sin(2*a),Math.cos(2*a),Math.sin(a),Math.cos(a),Math.sin(3*a),Math.cos(3*a)],l=0;l<_;l++)e=6*l,n=9*l,l%2?(t[0+n]=u[0],t[1+n]=u[1],t[3+n]=u[2],t[4+n]=u[3],t[6+n]=u[4],t[7+n]=u[5],r[0+n]=u[6],r[1+n]=u[7],r[3+n]=u[8],r[4+n]=u[9],r[6+n]=u[10],r[7+n]=u[11]):(r[0+n]=u[0],r[1+n]=u[1],r[3+n]=u[2],r[4+n]=u[3],r[6+n]=u[4],r[7+n]=u[5],t[0+n]=u[6],t[1+n]=u[7],t[3+n]=u[8],t[4+n]=u[9],t[6+n]=u[10],t[7+n]=u[11]),i[0+e]=i[2+e]=i[4+e]=l%x/x,i[1+e]=i[3+e]=i[5+e]=~~(l/x)/h;return(o=new d.BufferGeometry).setAttribute("position",new d.BufferAttribute(t,3)),o.setAttribute("positionFlip",new d.BufferAttribute(r,3)),o.setAttribute("fboUV",new d.BufferAttribute(i,2)),(a=new d.ShaderMaterial({uniforms:d.UniformsUtils.merge([d.UniformsLib.fog,d.UniformsLib.lights,{texturePosition:{type:"t",value:s},flipRatio:{type:"f",value:0},color1:{type:"c",value:s},color2:{type:"c",value:s},cameraMatrix:{type:"m4",value:s}}]),vertexShader:f(p(["#define GLSLIFY 1\n#include <common>\n#include <normal_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <fog_pars_vertex>\n\nuniform sampler2D texturePosition;\n\nvarying float vLife;\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\nuniform mat4 cameraMatrix;\n\nvoid main() {\n\n\tvec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec3 pos = positionInfo.xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    vLife = positionInfo.w;\n\n    mvPosition += vec4((position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, vLife), 0.0);\n    gl_Position = projectionMatrix * mvPosition;\n    worldPosition = cameraMatrix * mvPosition;\n\t\n\tvec3 objectNormal = vec3( 0.0, 1.0, 0.0 );\n\tvec3 transformedNormal = objectNormal;\n\t\n\t#include <normal_vertex>\n\t#include <shadowmap_vertex>\n}"])),fragmentShader:f(p(["#define GLSLIFY 1\n#include <common>\n#include <packing>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <fog_pars_fragment>\n\nvarying float vLife;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvoid main() {\n\n    vec3 outgoingLight = mix(color2, color1, smoothstep(0.0, 0.7, vLife));\n\t\n    outgoingLight *=  getShadowMask();\n\n\toutgoingLight = pow( outgoingLight, vec3( 1.0 / 2.2 ) );\n\n    gl_FragColor = vec4( outgoingLight, 1.0 );\n\t\n\t#include <fog_fragment>\n}"])),blending:d.NoBlending,side:d.DoubleSide,lights:!0,fog:!0})).uniforms.color1.value=c,a.uniforms.color2.value=v,a.uniforms.cameraMatrix.value=m.camera.matrixWorld,(o=new d.Mesh(o,a)).customDistanceMaterial=new d.ShaderMaterial({uniforms:d.UniformsUtils.merge([d.UniformsLib.common,{referencePosition:{value:new d.Vector3},nearDistance:{value:1},farDistance:{value:1e3}},{texturePosition:{type:"t",value:s},flipRatio:{type:"f",value:0}}]),vertexShader:f(p(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec3 pos = positionInfo.xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * (mvPosition + vec4((position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, positionInfo.w), 0.0));\n\n}\n"])),fragmentShader:f(p(["#define GLSLIFY 1\n#define DISTANCE\n#include <common>\n#include <packing>\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec4 vWorldPosition;\n\nvoid main () {\n\n\tfloat dist = length( vWorldPosition.xyz - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist);\n}\n"])),depthTest:!0,depthWrite:!0,side:d.BackSide,blending:d.NoBlending}),o.customDistanceMaterial.isMeshDistanceMaterial=!0,o.motionMaterial=new d.ShaderMaterial({uniforms:{u_prevModelViewMatrix:{type:"m4",value:new d.Matrix4},u_motionMultiplier:{type:"f",value:1},texturePosition:{type:"t",value:s},texturePrevPosition:{type:"t",value:s},flipRatio:{type:"f",value:0},cameraMatrix:{type:"m4",value:s}},vertexShader:f(p(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\nuniform sampler2D texturePrevPosition;\n\nattribute vec3 positionFlip;\nattribute vec2 fboUV;\n\nuniform float flipRatio;\nuniform mat4 u_prevModelViewMatrix;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n\tvec4 positionInfo = texture2D( texturePosition, fboUV );\n    vec4 prevPositionInfo = texture2D( texturePrevPosition, fboUV );\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(positionInfo.xyz + (position + (positionFlip - position) * flipRatio) * smoothstep(0.0, 0.2, positionInfo.w), 1.0);\n\t\n    vec4 pos = projectionMatrix * modelViewMatrix * vec4(positionInfo.xyz, 1.0);\n    vec4 prevPos = projectionMatrix * u_prevModelViewMatrix * vec4(prevPositionInfo.xyz, 1.0);\n    v_motion = (pos.xy / pos.w - prevPos.xy / prevPos.w) * 0.5 * step(positionInfo.w, prevPositionInfo.w);\n\n}\n"])),fragmentShader:f(p(["#define GLSLIFY 1\nuniform float u_motionMultiplier;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n        gl_FragColor = vec4( v_motion * u_motionMultiplier, gl_FragCoord.z, 1.0 );\n\n}\n"])),depthTest:!0,depthWrite:!0,side:d.DoubleSide,blending:d.NoBlending}),o.motionMaterial.motionMultiplier=1,o.motionMaterial.uniforms.cameraMatrix.value=m.camera.matrixWorld,o.castShadow=!0,o.receiveShadow=!0,g.add(o),o})(),r=(()=>{for(var e,n=new Float32Array(3*_),t=0;t<_;t++)n[0+(e=3*t)]=t%x/x,n[1+e]=~~(t/x)/h;var r=new d.BufferGeometry,i=(r.setAttribute("position",new d.BufferAttribute(n,3)),new d.ShaderMaterial({uniforms:d.UniformsUtils.merge([d.UniformsLib.lights,d.UniformsLib.fog,{texturePosition:{type:"t",value:s},color1:{type:"c",value:s},color2:{type:"c",value:s}}]),vertexShader:f(p(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying float vLife;\n// chunk(shadowmap_pars_vertex);\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n\n    vec4 worldPosition = modelMatrix * vec4( positionInfo.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    // chunk(shadowmap_vertex);\n\n    vLife = positionInfo.w;\n    gl_PointSize = 1300.0 / length( mvPosition.xyz ) * smoothstep(0.0, 0.2, positionInfo.w);\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n"])),fragmentShader:f(p(["#define GLSLIFY 1\n#include <common>\n#include <packing>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <fog_pars_fragment>\n\nvarying float vLife;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvoid main() {\n\n    vec3 outgoingLight = mix(color2, color1, smoothstep(0.0, 0.7, vLife));\n\t\n    outgoingLight *=  getShadowMask();\n\n\toutgoingLight = pow( outgoingLight, vec3( 1.0 / 2.2 ) );\n\n    gl_FragColor = vec4( outgoingLight, 1.0 );\n\t\n\t#include <fog_fragment>\n}"])),blending:d.NoBlending,side:d.DoubleSide,lights:!0,fog:!0}));return i.uniforms.color1.value=c,i.uniforms.color2.value=v,(r=new d.Points(r,i)).customDistanceMaterial=new d.ShaderMaterial({uniforms:{lightPos:{type:"v3",value:new d.Vector3(0,0,0)},texturePosition:{type:"t",value:s}},vertexShader:f(p(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n\n    vec4 worldPosition = modelMatrix * vec4( positionInfo.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    gl_PointSize = 50.0 / length( mvPosition.xyz );\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n"])),fragmentShader:f(p(["#define GLSLIFY 1\n#define DISTANCE\n#include <common>\n#include <packing>\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec4 vWorldPosition;\n\nvoid main () {\n\n\tfloat dist = length( vWorldPosition.xyz - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist);\n}\n"])),depthTest:!0,depthWrite:!0,side:d.BackSide,blending:d.NoBlending}),r.motionMaterial=new d.ShaderMaterial({uniforms:{u_prevModelViewMatrix:{type:"m4",value:new d.Matrix4},u_motionMultiplier:{type:"f",value:1},texturePosition:{type:"t",value:s},texturePrevPosition:{type:"t",value:s}},vertexShader:f(p(["#define GLSLIFY 1\nuniform sampler2D texturePosition;\nuniform sampler2D texturePrevPosition;\n\nuniform mat4 u_prevModelViewMatrix;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n    vec4 positionInfo = texture2D( texturePosition, position.xy );\n    vec4 prevPositionInfo = texture2D( texturePrevPosition, position.xy );\n\n    vec4 mvPosition = modelViewMatrix * vec4( positionInfo.xyz, 1.0 );\n    gl_PointSize = 1300.0 / length( mvPosition.xyz ) * smoothstep(0.0, 0.2, positionInfo.w);\n\n    vec4 pos = projectionMatrix * mvPosition;\n    vec4 prevPos = projectionMatrix * u_prevModelViewMatrix * vec4(prevPositionInfo.xyz, 1.0);\n    v_motion = (pos.xy / pos.w - prevPos.xy / prevPos.w) * 0.5 * step(positionInfo.w, prevPositionInfo.w);\n\n    gl_Position = pos;\n\n}\n"])),fragmentShader:f(p(["#define GLSLIFY 1\nuniform float u_motionMultiplier;\n\nvarying vec2 v_motion;\n\nvoid main() {\n\n        gl_FragColor = vec4( v_motion * u_motionMultiplier, gl_FragCoord.z, 1.0 );\n\n}\n"])),depthTest:!0,depthWrite:!0,side:d.DoubleSide,blending:d.NoBlending}),r.motionMaterial.motionMultiplier=1,r.castShadow=!0,r.receiveShadow=!0,g.add(r),r})()],i.visible=!1,r.visible=!1,0},t.update=function(e){var n;i.visible=m.useTriangleParticles,r.visible=!m.useTriangleParticles,a.setStyle(m.color1),c.lerp(a,.05),a.setStyle(m.color2),v.lerp(a,.05);for(var t=0;t<2;t++)(n=o[t]).material.uniforms.texturePosition.value=u.positionRenderTarget.texture,n.customDistanceMaterial.uniforms.texturePosition.value=u.positionRenderTarget.texture,n.motionMaterial.uniforms.texturePosition.value=u.positionRenderTarget.texture,n.motionMaterial.uniforms.texturePrevPosition.value=u.prevPositionRenderTarget.texture,n.material.uniforms.flipRatio&&(n.material.uniforms.flipRatio.value^=1,n.customDistanceMaterial.uniforms.flipRatio.value^=1,n.motionMaterial.uniforms.flipRatio.value^=1)},m.simulatorTextureWidth),h=m.simulatorTextureHeight,_=x*h},{1:1,11:11,17:17,36:36,37:37,38:38}],30:[function(e,n,t){var r=window.THREE,i=e(32),o=e(26),a=e(16),e=e(1);function u(){}var n=(n.exports=u).prototype,l=(n.init=function(e){a(this,{uniforms:{u_texture:{type:"t",value:void 0},u_resolution:{type:"v2",value:i.resolution},u_aspect:{type:"f",value:1}},enabled:!0,vertexShader:"",fragmentShader:"",isRawMaterial:!0,addRawShaderPrefix:!0},e),this.vertexShader||(this.vertexShader=this.isRawMaterial?o.vertexShader:l);this.addRawShaderPrefix&&this.isRawMaterial&&(this.vertexShader=o.rawShaderPrefix+this.vertexShader,this.fragmentShader=o.rawShaderPrefix+this.fragmentShader);this.material=new r[this.isRawMaterial?"RawShaderMaterial":"ShaderMaterial"]({uniforms:this.uniforms,vertexShader:this.vertexShader,fragmentShader:this.fragmentShader})},n.resize=function(e,n){},n.render=function(e,n,t){return this.uniforms.u_texture.value=n.texture,this.uniforms.u_aspect.value=this.uniforms.u_resolution.value.x/this.uniforms.u_resolution.value.y,i.render(this.material,t)},e(["#define GLSLIFY 1\nvarying vec2 v_uv;\n\nvoid main() {\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n"]))},{1:1,16:16,26:26,32:32}],31:[function(e,n,a){var u,t=e(30),l=e(32),s=e(26),r=e(1),i=window.THREE,a=n.exports=new t,c=t.prototype,v=(a.init=function(){c.init.call(this,{uniforms:{u_blurTexture:{type:"t",value:void 0},u_amount:{type:"f",value:0}},fragmentShader:r(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_blurTexture;\n\nuniform float u_amount;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n\n    vec3 baseColor = texture2D(u_texture, v_uv).rgb;\n    vec3 blurColor = texture2D(u_blurTexture, v_uv).rgb;\n    vec3 color = mix(baseColor, 1.0 - ((1.0 - baseColor) * (1.0 - blurColor)), u_amount);\n    // vec3 color = mix(baseColor, max(baseColor, blurColor), u_amount);\n\n    gl_FragColor = vec4(color, 1.0);\n\n}\n"])}),u=new i.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:void 0},u_delta:{type:"v2",value:new i.Vector2}},vertexShader:s.vertexShader,fragmentShader:s.rawShaderPrefix+r(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform vec2 u_delta;\n\nvarying vec2 v_uv;\n\nvoid main()\n{\n\n    vec3 color = texture2D( u_texture, v_uv ).rgb * 0.1633;\n\n    vec2 delta = u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.1531;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.1531;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.12245;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.12245;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.0918;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.0918;\n\n    delta += u_delta;\n    color += texture2D( u_texture,  v_uv - delta ).rgb * 0.051;\n    color += texture2D( u_texture,  v_uv + delta ).rgb * 0.051;\n\n    gl_FragColor = vec4(color, 1.0);\n\n}\n"])})},a.render=function(e,n,t){var r=l.getRenderTarget(v),i=l.getRenderTarget(v),o=(l.releaseRenderTarget(r,i),a.blurRadius);u.uniforms.u_texture.value=n.texture,u.uniforms.u_delta.value.set(o/l.resolution.x,0),s.render(u,r),o=a.blurRadius,u.uniforms.u_texture.value=r.texture,u.uniforms.u_delta.value.set(0,o/l.resolution.y),s.render(u,i),this.uniforms.u_blurTexture.value=i.texture,this.uniforms.u_amount.value=a.amount,c.render.call(this,e,n,t)},a.blurRadius=3,a.amount=.3,1)},{1:1,26:26,30:30,32:32}],32:[function(e,n,i){var t,a=window.THREE,u=e(26),l=e(16),o=(i.init=function(e,n,t){s=i.fromRenderTarget=u.createRenderTarget(),c=i.toRenderTarget=u.createRenderTarget(),v=i.resolution=new a.Vector2,i.renderer=e,i.scene=n,i.camera=t},i.resize=function(e,n){v.set(e,n),s.setSize(e,n),c.setSize(e,n),i.camera.aspect=e/n,i.camera.updateProjectionMatrix(),i.renderer.setSize(e,n);for(var t=0,r=o.length;t<r;t++)o[t].resize(e,n)},i.renderQueue=function(e){var n=o.filter(f);if(n.length){c.depthBuffer=!0,c.stencilBuffer=!0,i.renderer.setRenderTarget(c),i.renderer.render(i.scene,i.camera),i.renderer.setRenderTarget(null),p();for(var t=0,r=n.length;t<r;t++)n[t].render(e,s,t===r-1)}else i.renderer.render(i.scene,i.camera)},i.renderScene=function(e,n,t){n=n||i.scene,t=t||i.camera,e?(i.renderer.setRenderTarget(e),i.renderer.render(n,t),i.renderer.setRenderTarget(null)):i.renderer.render(n,t)},i.render=function(e,n){return u.render(e,n?t:c),p(),s},i.swapRenderTarget=p,i.getRenderTarget=function(e,n){e=e||0,n=+(n||0);var t,r=v.x>>e,i=v.y>>e,e=e+"_"+n,o=g(e);o.length?(t=o.pop(),l(t,d)):((t=u.createRenderTarget(r,i,n?a.RGBAFormat:a.RGBFormat))._listId=e,m[e]=m[e]||0);m[e]++,t.width===r&&t.height===i||t.setSize(r,i);return t},i.releaseRenderTarget=function(e){for(var n,t,r,i,o,a=arguments,u=0,l=a.length;u<l;u++){for(i=(e=a[u])._listId,o=g(i),n=!1,m[i]--,t=0,r=o.length;t<r;t++)if(o[t]===e){n=!0;break}n||o.push(e)}},i.resolution=t,i.queue=[]),s=i.fromRenderTarget=t,c=i.toRenderTarget=t,v=i.resolution=t,r={},m={},d={depthBuffer:!1,texture:{generateMipmaps:!1}};function f(e){return e.enabled}function p(){var e=c;c=i.toRenderTarget=s,s=i.fromRenderTarget=e}function g(e){return r[e]||(r[e]=[])}i.renderer=t,i.scene=t,i.camera=t},{16:16,26:26}],33:[function(e,n,t){var r=e(30),i=e(1),o=(n.exports=new r,r.prototype);n.exports.init=function(e){var n=e?i(["#define GLSLIFY 1\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform vec2 u_resolution;\n\nvarying vec2 v_uv;\n\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvoid main() {\n\n   vec2 fragCoord = uv * u_resolution;\n   texcoords(fragCoord, u_resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n    v_uv = uv;\n    gl_Position = vec4( position, 1.0 );\n\n}\n"]):"",e=i(e?['#define GLSLIFY 1\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 u_resolution;\nuniform sampler2D u_texture;\n\nvarying vec2 v_uv;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n\n    vec2 fragCoord = v_uv * u_resolution;\n\n    gl_FragColor = fxaa(u_texture, fragCoord, u_resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n}\n']:['#define GLSLIFY 1\nuniform vec2 u_resolution;\nuniform sampler2D u_texture;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\n//To save 9 dependent texture reads, you can compute\n//these in the vertex shader and use the optimized\n//frag.glsl function in your frag shader. \n\n//This is best suited for mobile devices, like iOS.\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvec4 apply(sampler2D tex, vec2 fragCoord, vec2 resolution) {\n\tmediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\n\t//compute the texture coords\n\ttexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\t\n\t//compute FXAA\n\treturn fxaa(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n\nvoid main() {\n    gl_FragColor = apply(u_texture, gl_FragCoord.xy, u_resolution);\n}\n']);o.init.call(this,{uniforms:{},vertexShader:n,fragmentShader:e})}},{1:1,30:30}],34:[function(e,n,m){var l,d,f,t,s,c,p,g,x,v,h,_,S,w,y,r=e(30),M=e(32),b=e(26),i=e(1),E=window.THREE,m=n.exports=new r,T=r.prototype,I=(m.init=function(e){M.renderer.getContext();(d=b.createRenderTarget(1,1,E.RGBAFormat,E.FloatType)).depthBuffer=!0,f=b.createRenderTarget(1,1,E.RGBAFormat,E.FloatType),(s=new E.Camera).position.z=1,c=new E.Scene,T.init.call(this,{uniforms:{u_lineAlphaMultiplier:{type:"f",value:1},u_linesTexture:{type:"t",value:f.texture}},fragmentShader:i(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_linesTexture;\nuniform float u_lineAlphaMultiplier;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec3 base = texture2D( u_texture, v_uv.xy ).rgb;\n    vec4 lines = texture2D( u_linesTexture, v_uv.xy );\n\n    vec3 color = (base + lines.rgb * u_lineAlphaMultiplier) / (lines.a * u_lineAlphaMultiplier + 1.0);\n\n    gl_FragColor = vec4( color, 1.0 );\n\n}\n"])}),p=[],x=new E.BufferGeometry,v=new E.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:l},u_motionTexture:{type:"t",value:d.texture},u_resolution:{type:"v2",value:M.resolution},u_maxDistance:{type:"f",value:1},u_jitter:{type:"f",value:.3},u_fadeStrength:{type:"f",value:1},u_motionMultiplier:{type:"f",value:1},u_depthTest:{type:"f",value:0},u_opacity:{type:"f",value:1},u_leaning:{type:"f",value:.5},u_depthBias:{type:"f",value:.01}},vertexShader:b.rawShaderPrefix+i(["#define GLSLIFY 1\nattribute vec3 position;\n\nuniform sampler2D u_texture;\nuniform sampler2D u_motionTexture;\n\nuniform vec2 u_resolution;\nuniform float u_maxDistance;\nuniform float u_jitter;\nuniform float u_motionMultiplier;\nuniform float u_leaning;\n\nvarying vec3 v_color;\nvarying float v_ratio;\nvarying float v_depth;\nvarying vec2 v_uv;\n\nvoid main() {\n\n    v_color = texture2D( u_texture, position.xy ).rgb;\n\n    float side = step(0.001, position.z);\n\n    v_ratio = side;\n\n    vec3 motion = texture2D( u_motionTexture, position.xy ).xyz;\n    v_depth = motion.z;\n\n    vec2 offset = motion.xy * u_resolution * u_motionMultiplier;\n    float offsetDistance = length(offset);\n    if(offsetDistance > u_maxDistance) {\n        offset = normalize(offset) * u_maxDistance;\n    }\n\n    vec2 pos = position.xy * 2.0 - 1.0 - offset / u_resolution * 2.0 * (1.0 - position.z * u_jitter) * (side - u_leaning);\n    v_uv = pos * 0.5 + 0.5;\n\n    gl_Position = vec4( pos, 0.0, 1.0 );\n\n}\n"]),fragmentShader:b.rawShaderPrefix+i(["#define GLSLIFY 1\nuniform sampler2D u_motionTexture;\nuniform float u_depthTest;\nuniform float u_opacity;\nuniform float u_leaning;\nuniform float u_fadeStrength;\nuniform float u_depthBias;\nuniform float u_useDepthWeight;\n\nvarying vec3 v_color;\nvarying float v_ratio;\nvarying float v_depth;\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec3 motion = texture2D( u_motionTexture, v_uv ).xyz;\n\n    float alpha = smoothstep(0.0, u_leaning, v_ratio) * (1.0 - smoothstep (u_leaning, 1.0, v_ratio));\n\n    alpha = pow(alpha, u_fadeStrength) * u_opacity;\n\n    if(alpha < 0.00392157) {\n        discard;\n    }\n\n    float threshold = v_depth * step(0.0001, motion.z);\n    alpha *= max(1.0 - u_depthTest, smoothstep(threshold - u_depthBias, threshold, motion.z));\n\n    gl_FragColor = vec4( v_color * alpha, alpha );\n\n}\n"]),blending:E.CustomBlending,blendEquation:E.AddEquation,blendSrc:E.OneFactor,blendDst:E.OneFactor,blendEquationAlpha:E.AddEquation,blendSrcAlpha:E.OneFactor,blendDstAlpha:E.OneFactor,depthTest:!1,depthWrite:!1,transparent:!0}),t=new E.LineSegments(x,v),c.add(t),h=new E.RawShaderMaterial({uniforms:{u_texture:{type:"t",value:l},u_motionTexture:{type:"t",value:d.texture},u_resolution:{type:"v2",value:M.resolution},u_maxDistance:{type:"f",value:1},u_fadeStrength:{type:"f",value:1},u_motionMultiplier:{type:"f",value:1},u_leaning:{type:"f",value:.5}},defines:{SAMPLE_COUNT:e||21},vertexShader:this.material.vertexShader,fragmentShader:b.rawShaderPrefix+"#define SAMPLE_COUNT "+(e||21)+"\n"+i(["#define GLSLIFY 1\nuniform sampler2D u_texture;\nuniform sampler2D u_motionTexture;\n\nuniform vec2 u_resolution;\nuniform float u_maxDistance;\nuniform float u_motionMultiplier;\nuniform float u_leaning;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec2 motion = texture2D( u_motionTexture, v_uv ).xy;\n\n    vec2 offset = motion * u_resolution * u_motionMultiplier;\n    float offsetDistance = length(offset);\n    if(offsetDistance > u_maxDistance) {\n        offset = normalize(offset) * u_maxDistance;\n    }\n    vec2 delta = - offset / u_resolution * 2.0 / float(SAMPLE_COUNT);\n    vec2 pos = v_uv - delta * u_leaning * float(SAMPLE_COUNT);\n    vec3 color = vec3(0.0);\n\n    for(int i = 0; i < SAMPLE_COUNT; i++) {\n        color += texture2D( u_texture, pos ).rgb;\n        pos += delta;\n    }\n\n    gl_FragColor = vec4( color / float(SAMPLE_COUNT), 1.0 );\n\n}\n"])})},m.resize=P,m.render=function(e,n,t){(_!==m.useDithering||S!==m.useSampling)&&P();var r=m.useSampling,i=1e3/(e<16.667?16.667:e)/m.targetFPS,o=b.getColorState();M.renderer.setClearColor(0,1),M.renderer.setRenderTarget(d),M.renderer.clear(),M.renderer.setRenderTarget(null),M.scene.traverseVisible(R),M.renderScene(d);for(var a=0,u=I.length;a<u;a++)(e=>{e.motionMaterial?(e.material=e._tmpMaterial,e._tmpMaterial=l,m.skipMatrixUpdate||e.motionMaterial.uniforms.u_prevModelViewMatrix.value.copy(e.modelViewMatrix)):e.visible=!0})(I[a]);I=[],r||(v.uniforms.u_maxDistance.value=m.maxDistance,v.uniforms.u_jitter.value=m.jitter,v.uniforms.u_fadeStrength.value=m.fadeStrength,v.uniforms.u_motionMultiplier.value=m.motionMultiplier*i,v.uniforms.u_depthTest.value=m.depthTest,v.uniforms.u_opacity.value=m.opacity,v.uniforms.u_leaning.value=Math.max(.001,Math.min(.999,m.leaning)),v.uniforms.u_depthBias.value=Math.max(1e-5,m.depthBias),v.uniforms.u_texture.value=n.texture,M.renderer.setClearColor(0,0),M.renderer.setRenderTarget(f),M.renderer.clear(),M.renderer.render(c,s),M.renderer.setRenderTarget(null));b.setColorState(o),r?(h.uniforms.u_maxDistance.value=m.maxDistance,h.uniforms.u_fadeStrength.value=m.fadeStrength,h.uniforms.u_motionMultiplier.value=m.motionMultiplier*i,h.uniforms.u_leaning.value=Math.max(.001,Math.min(.999,m.leaning)),h.uniforms.u_texture.value=n.texture,M.render(h,t)):(this.uniforms.u_lineAlphaMultiplier.value=1+m.useDithering,T.render.call(this,e,n,t))},m.useSampling=!1,m.skipMatrixUpdate=!1,m.fadeStrength=1,m.motionMultiplier=1,m.maxDistance=100,m.targetFPS=60,m.leaning=.5,m.jitter=0,m.opacity=1,m.depthBias=.002,m.depthTest=!1,m.useDithering=!1,m.motionRenderTargetScale=1,m.linesRenderTargetScale=.5,[]);function P(e,n){e?(w=e,y=n):(e=w,n=y);var t=~~(e*m.motionRenderTargetScale),r=~~(n*m.motionRenderTargetScale);if(d.setSize(t,r),!m.useSampling){for(var i,o,a=~~(e*m.linesRenderTargetScale),u=~~(n*m.linesRenderTargetScale),l=(f.setSize(a,u),!m.useDithering),e=l?a*u:(t=u,1&(r=a)&&1&t?((r-1)*(t-1)>>1)+(r>>1)+(t>>1):r*t>>1),s=(p.length/6<e&&(p=new Float32Array(6*e),g=new E.BufferAttribute(p,3),x.setAttribute("position",g)),0),c=a*u,v=0;v<c;v++)i=v%a,o=~~(v/a),(l||i+(1&o)&1)&&(p[s+0]=p[s+3]=(.5+i)/a,p[s+1]=p[s+4]=(.5+o)/u,p[s+2]=0,p[s+5]=.001+.999*Math.random(),s+=6);g.needsUpdate=!0,x.drawRange.count=2*e}_=m.useDithering,S=m.useSampling}function R(e){e.motionMaterial?(e._tmpMaterial=e.material,e.material=e.motionMaterial,e.material.uniforms.u_motionMultiplier.value=e.material.motionMultiplier):e.material&&(e.visible=!1),I.push(e)}},{1:1,26:26,30:30,32:32}],35:[function(e,n,t){var r=e(32),i=e(33),o=e(31),a=e(34),u=e(26);t.init=function(e,n,t){r.init(e,n,t),i.init(),r.queue.push(i),a.init(),r.queue.push(a),o.init(),r.queue.push(o)},t.resize=function(e,n){r.resize(e,n)},t.render=function(e){r.renderQueue(e),t.visualizeTarget&&u.copy(t.visualizeTarget)},t.visualizeTarget=void 0},{26:26,31:31,32:32,33:33,34:34}],36:[function(e,n,u){var t,r,l,s,c,v,m,d,f,p,g,x=e(37),h=window.THREE,i=e(1),o=e(38),_=0,S=u.TEXTURE_WIDTH=x.simulatorTextureWidth,w=u.TEXTURE_HEIGHT=x.simulatorTextureHeight,y=u.AMOUNT=S*w;u.init=function(e){m=e,g=new h.Vector3;var e="precision "+e.capabilities.precision+" float;\n",n=m.getContext();n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(f=new h.Scene,(p=new h.Camera).position.z=1,r=new h.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new h.Vector2(S,w)},texture:{type:"t",value:t}},vertexShader:e+o(i(["#define GLSLIFY 1\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n"])),fragmentShader:e+o(i(["#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n    gl_FragColor = texture2D( texture, uv );\n}\n"]))}),l=new h.RawShaderMaterial({uniforms:{resolution:{type:"v2",value:new h.Vector2(S,w)},texturePosition:{type:"t",value:t},textureDefaultPosition:{type:"t",value:t},mouse3d:{type:"v3",value:new h.Vector3},speed:{type:"f",value:1},dieSpeed:{type:"f",value:0},radius:{type:"f",value:0},curlSize:{type:"f",value:0},attraction:{type:"f",value:0},time:{type:"f",value:0},initAnimation:{type:"f",value:0}},vertexShader:e+o(i(["#define GLSLIFY 1\nattribute vec3 position;\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n"])),fragmentShader:e+o(i(["#define GLSLIFY 1\nuniform vec2 resolution;\nuniform sampler2D texturePosition;\nuniform sampler2D textureDefaultPosition;\nuniform float time;\nuniform float speed;\nuniform float dieSpeed;\nuniform float radius;\nuniform float curlSize;\nuniform float attraction;\nuniform float initAnimation;\nuniform vec3 mouse3d;\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip) {\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p,s;\n\n    p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n    return p;\n}\n\n#define F4 0.309016994374947451\n\nvec4 simplexNoiseDerivatives (vec4 v) {\n    const vec4  C = vec4( 0.138196601125011,0.276393202250021,0.414589803375032,-0.447213595499958);\n\n    vec4 i  = floor(v + dot(v, vec4(F4)) );\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n    vec4 i0;\n    vec3 isX = step( x0.yzw, x0.xxx );\n    vec3 isYZ = step( x0.zww, x0.yyz );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    vec4 i3 = clamp( i0, 0.0, 1.0 );\n    vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n    vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n    vec4 x1 = x0 - i1 + C.xxxx;\n    vec4 x2 = x0 - i2 + C.yyyy;\n    vec4 x3 = x0 - i3 + C.zzzz;\n    vec4 x4 = x0 + C.wwww;\n\n    i = mod289(i);\n    float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n    vec4 p0 = grad4(j0,   ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4,p4));\n\n    vec3 values0 = vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)); //value of contributions from each corner at point\n    vec2 values1 = vec2(dot(p3, x3), dot(p4, x4));\n\n    vec3 m0 = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0); //(0.5 - x^2) where x is the distance\n    vec2 m1 = max(0.5 - vec2(dot(x3,x3), dot(x4,x4)), 0.0);\n\n    vec3 temp0 = -6.0 * m0 * m0 * values0;\n    vec2 temp1 = -6.0 * m1 * m1 * values1;\n\n    vec3 mmm0 = m0 * m0 * m0;\n    vec2 mmm1 = m1 * m1 * m1;\n\n    float dx = temp0[0] * x0.x + temp0[1] * x1.x + temp0[2] * x2.x + temp1[0] * x3.x + temp1[1] * x4.x + mmm0[0] * p0.x + mmm0[1] * p1.x + mmm0[2] * p2.x + mmm1[0] * p3.x + mmm1[1] * p4.x;\n    float dy = temp0[0] * x0.y + temp0[1] * x1.y + temp0[2] * x2.y + temp1[0] * x3.y + temp1[1] * x4.y + mmm0[0] * p0.y + mmm0[1] * p1.y + mmm0[2] * p2.y + mmm1[0] * p3.y + mmm1[1] * p4.y;\n    float dz = temp0[0] * x0.z + temp0[1] * x1.z + temp0[2] * x2.z + temp1[0] * x3.z + temp1[1] * x4.z + mmm0[0] * p0.z + mmm0[1] * p1.z + mmm0[2] * p2.z + mmm1[0] * p3.z + mmm1[1] * p4.z;\n    float dw = temp0[0] * x0.w + temp0[1] * x1.w + temp0[2] * x2.w + temp1[0] * x3.w + temp1[1] * x4.w + mmm0[0] * p0.w + mmm0[1] * p1.w + mmm0[2] * p2.w + mmm1[0] * p3.w + mmm1[1] * p4.w;\n\n    return vec4(dx, dy, dz, dw) * 49.0;\n}\n\nvec3 curl( in vec3 p, in float noiseTime, in float persistence ) {\n\n    vec4 xNoisePotentialDerivatives = vec4(0.0);\n    vec4 yNoisePotentialDerivatives = vec4(0.0);\n    vec4 zNoisePotentialDerivatives = vec4(0.0);\n\n    for (int i = 0; i < 3; ++i) {\n\n        float twoPowI = pow(2.0, float(i));\n        float scale = 0.5 * twoPowI * pow(persistence, float(i));\n\n        xNoisePotentialDerivatives += simplexNoiseDerivatives(vec4(p * twoPowI, noiseTime)) * scale;\n        yNoisePotentialDerivatives += simplexNoiseDerivatives(vec4((p + vec3(123.4, 129845.6, -1239.1)) * twoPowI, noiseTime)) * scale;\n        zNoisePotentialDerivatives += simplexNoiseDerivatives(vec4((p + vec3(-9519.0, 9051.0, -123.0)) * twoPowI, noiseTime)) * scale;\n    }\n\n    return vec3(\n        zNoisePotentialDerivatives[1] - yNoisePotentialDerivatives[2],\n        xNoisePotentialDerivatives[2] - zNoisePotentialDerivatives[0],\n        yNoisePotentialDerivatives[0] - xNoisePotentialDerivatives[1]\n    );\n\n}\n\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec4 positionInfo = texture2D( texturePosition, uv );\n    vec3 position = mix(vec3(0.0, -200.0, 0.0), positionInfo.xyz, smoothstep(0.0, 0.3, initAnimation));\n    float life = positionInfo.a - dieSpeed;\n\n    vec3 followPosition = mix(vec3(0.0, -(1.0 - initAnimation) * 200.0, 0.0), mouse3d, smoothstep(0.2, 0.7, initAnimation));\n\n    if(life < 0.0) {\n        positionInfo = texture2D( textureDefaultPosition, uv );\n        position = positionInfo.xyz * (1.0 + sin(time * 15.0) * 0.2 + (1.0 - initAnimation)) * 0.4 * radius;\n        position += followPosition;\n        life = 0.5 + fract(positionInfo.w * 21.4131 + time);\n    } else {\n        vec3 delta = followPosition - position;\n        position += delta * (0.005 + life * 0.01) * attraction * (1.0 - smoothstep(50.0, 350.0, length(delta))) *speed;\n        position += curl(position * curlSize, time, 0.1 + (1.0 - life) * 0.1) *speed;\n    }\n\n    gl_FragColor = vec4(position, life);\n\n}\n"])),blending:h.NoBlending,transparent:!1,depthWrite:!1,depthTest:!1}),d=new h.Mesh(new h.PlaneGeometry(2,2),r),f.add(d),c=new h.WebGLRenderTarget(S,w,{wrapS:h.ClampToEdgeWrapping,wrapT:h.ClampToEdgeWrapping,minFilter:h.NearestFilter,magFilter:h.NearestFilter,format:h.RGBAFormat,type:h.FloatType,depthWrite:!1,depthBuffer:!1,stencilBuffer:!1}),v=c.clone(),a(n=(()=>{for(var e,n,t,r,i=new Float32Array(4*y),o=0;o<y;o++)e=4*o,n=50*(.5+.5*Math.random()),t=(Math.random()-.5)*Math.PI,r=Math.random()*Math.PI*2,i[0+e]=n*Math.cos(r)*Math.cos(t),i[1+e]=n*Math.sin(t),i[2+e]=n*Math.sin(r)*Math.cos(t),i[3+e]=Math.random();var a=new h.DataTexture(i,S,w,h.RGBAFormat,h.FloatType);return a.minFilter=h.NearestFilter,a.magFilter=h.NearestFilter,a.needsUpdate=!0,a.generateMipmaps=!1,a.flipY=!1,s=a})(),c),a(n,v)):alert("No support for vertex shader textures!")},u.update=function(e){{var n,t,r,i,o,a;(x.speed||x.dieSpeed)&&(n=200,t=60,x.isMobile&&(n=100,t=40),r=m.autoClearColor,i=m.getClearColor(new h.Color).getHex(),o=m.getClearAlpha(),m.autoClearColor=!1,a=e/16.6667,l.uniforms.speed.value=x.speed*a,l.uniforms.dieSpeed.value=x.dieSpeed*a,l.uniforms.radius.value=x.radius,l.uniforms.curlSize.value=x.curlSize,l.uniforms.attraction.value=x.attraction,l.uniforms.initAnimation.value=u.initAnimation,x.followMouse?l.uniforms.mouse3d.value.copy(x.mouse3d):(_+=.001*e*x.speed,a=(0,M[b])(_,n,t),g.set(a.x,a.y,a.z),l.uniforms.mouse3d.value.lerp(g,.2)),(e=>{var n=c;c=v,v=n,(d.material=l).uniforms.textureDefaultPosition.value=s,l.uniforms.texturePosition.value=v.texture,l.uniforms.time.value+=.001*e,m.setRenderTarget(c),m.render(f,p),m.setRenderTarget(null)})(e),m.setClearColor(i,o),m.autoClearColor=r,u.positionRenderTarget=c,u.prevPositionRenderTarget=v)}},u.initAnimation=0,u.positionRenderTarget=t,u.prevPositionRenderTarget=t,u.setPattern=e=>{M[e]&&(b=e)};let M={default:(e,n,t)=>({x:Math.cos(e)*n,y:Math.cos(4*e)*t,z:Math.sin(2*e)*n}),circle:(e,n,t)=>({x:Math.cos(e)*n,y:Math.sin(2*e)*t,z:Math.sin(e)*n}),spiral:(e,n,t)=>({x:Math.cos(e)*n*(1-.1*e%1),y:10*e%t,z:Math.sin(e)*n*(1-.1*e%1)}),still:(e,n,t)=>({x:.5*n,y:0,z:.5*n})};var b="default";function a(e,n){(d.material=r).uniforms.texture.value=e,m.setRenderTarget(n),m.render(f,p),m.setRenderTarget(null)}},{1:1,37:37,38:38}],37:[function(e,n,t){var r=e(21),e=e(15),r=t.query=r(window.location.href.replace("#","?")),i=(t.useStats=!1,t.isMobile=/(iPad|iPhone|Android)/i.test(navigator.userAgent),{"4k":[64,64,.29],"8k":[128,64,.42],"16k":[128,128,.48],"32k":[256,128,.55],"65k":[256,256,.6],"131k":[512,256,.85],"252k":[512,512,1.2],"524k":[1024,512,1.4],"1m":[1024,1024,1.6],"2m":[2048,1024,2],"4m":[2048,2048,2.5]}),i=(t.amountList=e(i),r.amount=i[r.amount]?r.amount:t.isMobile?"16k":"65k",i[r.amount]),i=(t.simulatorTextureWidth=i[0],t.simulatorTextureHeight=i[1],t.useTriangleParticles=!0,t.followMouse=!0,t.showFloor=!0,t.speed=1,t.dieSpeed=.015,t.radius=1.3*i[2],t.curlSize=.02,t.attraction=1,t.shadowDarkness=.01,t.bgColor="#1A374D",t.color1="#6998AB",t.color2="#B1D0E0",t.fxaa=!1,t.motionBlurQualityMap={best:1,high:.5,medium:1/3,low:.25});t.motionBlurQualityList=e(i),r.motionBlurQuality=i[r.motionBlurQuality]?r.motionBlurQuality:"medium",t.motionBlur=!1,t.motionBlurPause=!0,t.bloom=!1},{15:15,21:21}],38:[function(e,n,t){var i,o=window.THREE,r=/\/\/\s?chunk_replace\s(.+)([\d\D]+)\/\/\s?end_chunk_replace/gm,a=/\/\/\s?chunk\(\s?(\w+)\s?\);/g,u=/GLOBAL_VAR_([^_\.\)\;\,\s]+)(_\d+)?/g;function l(e,n,t){return i[n.trim()]=t,""}function s(e,n){var t,r=o.ShaderChunk[n]+"\n";for(t in i)r=r.replace(t,i[t]);return r}function c(e,n){return n}n.exports=function(e){return i={},(e=(e=e.replace(r,l)).replace(a,s)).replace(u,c)}},{}],39:[function(r,e,n){var i,o,a,u,l,s,c,v,m,d,f,p,g,x,h,_,S,w,y=r(25),M=0,t=0,b=0,E=0,T=.05;function I(e){if(e)return window.THREE=e,THREE=e,window.THREE;throw new Error("THREE must be provided to initialize the WebGL experience")}function P(e){32===e.keyCode&&(w.speed=0===w.speed?1:0,w.dieSpeed=0===w.dieSpeed?.015:0)}function R(e){w.mouse.x=e.clientX/M*2-1,w.mouse.y=-e.clientY/t*2+1}function A(){M=window.innerWidth,t=window.innerHeight,_.resize(M,t)}function D(){var e=Date.now(),n=(y(D),e-b),t=e,r=(s.x+=(c.x-s.x)*T,s.y+=(c.y-s.y)*T,s.z+=(c.z-s.z)*T,i.position.copy(s),i.lookAt(0,0,0),v.skipMatrixUpdate=!(w.dieSpeed||w.speed)&&w.motionBlurPause,l.setStyle(w.bgColor),h.mesh.material.color),r=(r=l,o.fog.color.copy(r),a.setClearColor(r.getHex()),E=Math.min(E+25e-5*n,1),p.initAnimation=E,x.update(n,i),h.mesh.visible=w.showFloor,i.updateMatrixWorld(),u.origin.setFromMatrixPosition(i.matrixWorld),u.direction.set(w.mouse.x,w.mouse.y,.5).unproject(i).sub(u.origin).normalize(),u.origin.length()/Math.cos(Math.PI-u.direction.angleTo(u.origin)));u.origin.add(u.direction.multiplyScalar(r)),p.update(n),g.update(n),(r=Math.min(1.2*(1-2*Math.abs(E-.5)),1))&&(r=.8+.5*Math.pow(E,1.5),M<580)&&(r*=.5),r=S.unLerp(.5,.6,E),m.enabled=!!w.fxaa,v.enabled=!!w.motionBlur,d.enabled=!!w.bloom,_.render(n,t),b=e}e.exports={init:function(e,n){var t;I(e),u=new THREE.Ray,s=new THREE.Vector3,c=new THREE.Vector3,w=r(37),S=r(41),r(40),r(19),_=r(35),v=r(34),m=r(33),d=r(31),f=r(26),p=r(36),g=r(29),x=r(28),h=r(27),l=new THREE.Color(w.bgColor),w.mouse=new THREE.Vector2(0,0),w.mouse3d=u.origin,(a=new THREE.WebGLRenderer({antialias:!0})).setClearColor(w.bgColor),a.shadowMap.enabled=!0,a.shadowMap.type=THREE.PCFSoftShadowMap,n.appendChild(a.domElement),(o=new THREE.Scene).fog=new THREE.FogExp2(w.bgColor,.001),(i=new THREE.PerspectiveCamera(45,1,10,3e3)).position.set(0,200,45),i.lookAt(0,0,0),s.copy(i.position),c.copy(i.position),w.camera=i,w.cameraPosition=i.position,f.init(a),_.init(a,o,i),p.init(a),g.init(a),o.add(g.container),x.init(a),o.add(x.mesh),o.add(new THREE.PointLightHelper(x.pointLight)),h.init(a),h.mesh.position.y=-100,o.add(h.mesh),window.addEventListener("resize",A),window.addEventListener("mousemove",R),window.addEventListener("touchmove",(t=R,function(e){w.isMobile&&e.preventDefault&&e.preventDefault(),t(e.changedTouches[0])})),window.addEventListener("keyup",P),b=Date.now(),A(),D()},initTHREE:I,updateSettings:function(e){w.speed=e.speed,w.dieSpeed=e.dieSpeed,w.bgColor=e.bgColor,w.followMouse=e.followMouse,w.showFloor=e.showFloor,w.attraction=e.attraction,w.color1=e.color1,w.color2=e.color2,w.curlSize=e.curlSize,w.radius=e.radius,w.shadowDarkness=e.shadowDarkness,w.simulatorTextureWidth=e.simulatorTextureWidth,w.simulatorTextureHeight=e.simulatorTextureHeight,void 0!==e.cameraTransitionSpeed&&(T=1-Math.pow(.1,1/(60*e.cameraTransitionSpeed))),void 0!==e.cameraX&&void 0!==e.cameraY&&void 0!==e.cameraZ&&c.set(e.cameraX,e.cameraY,e.cameraZ),e.pattern&&p.setPattern(e.pattern)}}},{19:19,25:25,26:26,27:27,28:28,29:29,31:31,33:33,34:34,35:35,36:36,37:37,40:40,41:41}],40:[function(e,n,t){var r,i,o={Linear:{None:function(e){return e}},Quad:{In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}},Cubic:{In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}},Quart:{In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}},Quint:{In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}},Sine:{In:function(e){return 1-Math.cos(e*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.cos(Math.PI*e))}},Expo:{In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))}},Circ:{In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}},Elastic:{In:function(e){var n,t=.1;return 0===e?0:1===e?1:(n=!t||t<1?(t=1,.1):.4*Math.asin(1/t)/(2*Math.PI),-(t*Math.pow(2,10*--e)*Math.sin(2*(e-n)*Math.PI/.4)))},Out:function(e){var n,t=.1;return 0===e?0:1===e?1:(n=!t||t<1?(t=1,.1):.4*Math.asin(1/t)/(2*Math.PI),t*Math.pow(2,-10*e)*Math.sin(2*(e-n)*Math.PI/.4)+1)},InOut:function(e){var n,t=.1;return 0===e?0:1===e?1:(n=!t||t<1?(t=1,.1):.4*Math.asin(1/t)/(2*Math.PI),(e*=2)<1?-.5*t*Math.pow(2,10*--e)*Math.sin(2*(e-n)*Math.PI/.4):t*Math.pow(2,-10*--e)*Math.sin(2*(e-n)*Math.PI/.4)*.5+1)}},Back:{In:function(e){return e*e*(2.70158*e-1.70158)},Out:function(e){return--e*e*(2.70158*e+1.70158)+1},InOut:function(e){var n=2.5949095;return(e*=2)<1?.5*e*e*((1+n)*e-n):.5*((e-=2)*e*((1+n)*e+n)+2)}},Bounce:{In:function(e){return 1-o.Bounce.Out(1-e)},Out:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return e<.5?.5*o.Bounce.In(2*e):.5*o.Bounce.Out(2*e-1)+.5}}};for(r in t.basic=o,t.linear=o.Linear,o)"Linear"!==r&&(i=o[r],t["easeIn"+r]=i.In,t["easeOut"+r]=i.Out,t["easeInOut"+r]=i.InOut)},{}],41:[function(e,n,t){for(var r in Math)t[r]=Math[r];t.step=function(e,n){return n<e?0:1},t.smoothstep=function(e,n,t){return(t=o(e,n,t))*t(3-2*t)},t.clamp=function(e,n,t){return e<n?n:t<e?t:e},t.mix=t.lerp=function(e,n,t){return t<=0?e:1<=t?n:e+(n-e)*t},t.unMix=t.unLerp=o,t.unClampedMix=t.unClampedLerp=function(e,n,t){return e+(n-e)*t},t.upClampedUnMix=t.unClampedUnLerp=function(e,n,t){return(t-e)/(n-e)},t.fract=a,t.hash=function(e){return a(43758.5453123*Math.sin(e))},t.hash2=function(e,n){return a(43758.5453*Math.sin(12.9898*e+4.1414*n))},t.sign=function(e){return e?e<0?-1:1:0};var i=Math.PI;t.TAU=2*i;function o(e,n,t){return t<=e?0:n<=t?1:(t-e)/(n-e)}function a(e){return e-Math.floor(e)}},{}]},{},[39])(39)});